Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> 

>>> from collections import deque
>>> d = deque('abcdefg')
>>> d
deque(['a', 'b', 'c', 'd', 'e', 'f', 'g'])
>>> d.append('h')
>>> d.append('i')
>>> d
deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])
>>> d.pop()
'i'
>>> d
deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])
>>> d.appendleft('z')
>>> d.appendleft('y')
>>> d
deque(['y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])
>>> d.popleft()
'y'
>>> # double-ended-queue ==> deque   "deck"
>>> 
>>> d
deque(['z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])
>>> x = d.popleft()
>>> d.append(x)
>>> d
deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'z'])
>>> x = d.popleft()
>>> d.append(x)
>>> d
deque(['b', 'c', 'd', 'e', 'f', 'g', 'h', 'z', 'a'])
>>> x = d.popleft()
>>> d.append(x)
>>> 
>>> d
deque(['c', 'd', 'e', 'f', 'g', 'h', 'z', 'a', 'b'])
>>> d.rotate(2)
>>> d
deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'z'])
>>> d.rotate(-2)
>>> d
deque(['c', 'd', 'e', 'f', 'g', 'h', 'z', 'a', 'b'])
>>> d.rotate(3)              # cutting the deck
>>> 
>>> 
>>> # .pop(0)    .insert(0,        del s[0]
>>> # popleft()   appendleft()
>>> 
>>> 
>>> from collections import deque
>>> d = deque('abcdef', maxlen=5)
>>> d
deque(['b', 'c', 'd', 'e', 'f'], maxlen=5)
>>> d.append('g')
>>> d
deque(['c', 'd', 'e', 'f', 'g'], maxlen=5)
>>> d.appendleft('b')
>>> d
deque(['b', 'c', 'd', 'e', 'f'], maxlen=5)
>>> 
>>> f = open('notes3/hamlet.txt')
>>> next(f)
'The Tragedy of Hamlet, Prince of Denmark\r\n'
>>> next(f)
'Shakespeare homepage | Hamlet | Entire play\r\n'
>>> next(f)
'ACT I\r\n'
>>> 
>>> tail = deque(open('notes3/hamlet.txt', maxlen=20))

Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    tail = deque(open('notes3/hamlet.txt', maxlen=20))
TypeError: 'maxlen' is an invalid keyword argument for this function
>>> tail = deque(open('notes3/hamlet.txt'), maxlen=20)
>>> for line in tail:
	print line,

	

    Of that I shall have also cause to speak,
    And from his mouth whose voice will draw on more;
    But let this same be presently perform'd,
    Even while men's minds are wild; lest more mischance
    On plots and errors, happen.

PRINCE FORTINBRAS

    Let four captains
    Bear Hamlet, like a soldier, to the stage;
    For he was likely, had he been put on,
    To have proved most royally: and, for his passage,
    The soldiers' music and the rites of war
    Speak loudly for him.
    Take up the bodies: such a sight as this
    Becomes the field, but here shows much amiss.
    Go, bid the soldiers shoot.

    A dead march. Exeunt, bearing off the dead bodies; after which a peal of ordnance is shot off
>>>     >>> s = 'she sells sea shells by the sea shore and peter piper picked a peck of pickled peppers'
    
  File "<pyshell#56>", line 1
    >>> s = 'she sells sea shells by the sea shore and peter piper picked a peck of pickled peppers'
    ^
IndentationError: unexpected indent
>>> s = 'she sells sea shells by the sea shore and peter piper picked a peck of pickled peppers'
>>> cores = 4
>>> segment = -(-len(s) // 4)
>>> segment
22
>>> 22 * 4
88
>>> len(s)
86
>>> segments = [s[i*segment: i*segment+segment] for i in range(cores)]
>>> seqments

Traceback (most recent call last):
  File "<pyshell#64>", line 1, in <module>
    seqments
NameError: name 'seqments' is not defined
>>> segments = [s[i*segment: i*segment+segment] for i in range(cores)]
>>> segments
['she sells sea shells b', 'y the sea shore and pe', 'ter piper picked a pec', 'k of pickled peppers']
>>> # Bad way:    segment in --> number out
>>> # Better way:  number in --> number in
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
>>> type(page)
<type 'str'>
>>> print page[:200]
<!DOCTYPE html><html class="no-js"><head><meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"><meta charset="utf-8"><meta content="text/html" http-equiv="Content-Type"><meta name="viewport" c
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
102482
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
http://www.cnn.com 102482
http://www.python.org 102482
http://www.jython.org 102482
http://www.pypy.org 102482
http://www.perl.org 102482
http://www.cisco.com 102482
http://www.facebook.com 102482
http://www.twitter.com 102482
>>> site
'http://www.twitter.com'
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
http://www.cnn.com 102482
http://www.python.org 47379
http://www.jython.org 19210
http://www.pypy.org 5985
http://www.perl.org 13959
http://www.cisco.com 60979
http://www.facebook.com 71266
http://www.twitter.com 258917
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102439)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71261)
('http://www.twitter.com', 255973)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 72763)
('http://www.twitter.com', 256357)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py", line 88, in <module>
    from multiprocessing import ThreadPool as Pool
ImportError: cannot import name ThreadPool
>>> from multiprocessing import ThreadPool as Pool

Traceback (most recent call last):
  File "<pyshell#72>", line 1, in <module>
    from multiprocessing import ThreadPool as Pool
ImportError: cannot import name ThreadPool
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71308)
('http://www.twitter.com', 256358)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71264)
('http://www.twitter.com', 256624)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71296)
('http://www.twitter.com', 256615)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71312)
('http://www.twitter.com', 257021)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71269)
('http://www.twitter.com', 257021)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.python.org', 47379)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71299)
('http://www.twitter.com', 257012)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cisco.com', 60979)
('http://www.pypy.org', 5985)
('http://www.cnn.com', 102004)
('http://www.jython.org', 19210)
('http://www.perl.org', 13959)
('http://www.facebook.com', 71202)
('http://www.python.org', 47379)
('http://www.twitter.com', 257021)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.python.org', 47379)
('http://www.jython.org', 19210)
('http://www.pypy.org', 5985)
('http://www.perl.org', 13959)
('http://www.cisco.com', 60979)
('http://www.facebook.com', 71299)
('http://www.twitter.com', 258222)
>>> type(results)
<type 'list'>
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====
('http://www.cnn.com', 102004)
('http://www.pypy.org', 5985)
('http://www.jython.org', 19210)
('http://www.cisco.com', 60979)
('http://www.perl.org', 13959)
('http://www.facebook.com', 71268)
('http://www.python.org', 47379)
('http://www.twitter.com', 258943)
>>> 
==== RESTART: /Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py ====

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/multiprocessing_demo.py", line 93, in <module>
    for result in pool.imap_unordered(sitesize, sites):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/multiprocessing/pool.py", line 668, in next
    raise value
ZeroDivisionError: integer division or modulo by zero
>>> 
>>> 
>>> 
>>> 
>>> 
>>> def square(x):
	return x * x

>>> map(square, range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> def square(x):
	print 'Computing square of', x
	return x * x

>>> map(square, range(10))
Computing square of 0
Computing square of 1
Computing square of 2
Computing square of 3
Computing square of 4
Computing square of 5
Computing square of 6
Computing square of 7
Computing square of 8
Computing square of 9
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> total = 0
>>> for s in map(square, range(10)):
	total += s
	print 'Running total is', total

	
Computing square of 0
Computing square of 1
Computing square of 2
Computing square of 3
Computing square of 4
Computing square of 5
Computing square of 6
Computing square of 7
Computing square of 8
Computing square of 9
Running total is 0
Running total is 1
Running total is 5
Running total is 14
Running total is 30
Running total is 55
Running total is 91
Running total is 140
Running total is 204
Running total is 285
>>> 
>>> from itertools import imap
>>> it = imap(square, range(10))
>>> it
<itertools.imap object at 0x105f53cd0>
>>> next(it)
Computing square of 0
0
>>> next(it)
Computing square of 1
1
>>> total = 0
>>> 
>>> 
>>> 
>>> from itertools import imap
>>> def square(x):
	print 'Computing square of', x
	return x * x

>>> total = 0
>>> for s in imap(square, range(10)):
	total += s
	print 'Running total is', total

	
Computing square of 0
Running total is 0
Computing square of 1
Running total is 1
Computing square of 2
Running total is 5
Computing square of 3
Running total is 14
Computing square of 4
Running total is 30
Computing square of 5
Running total is 55
Computing square of 6
Running total is 91
Computing square of 7
Running total is 140
Computing square of 8
Running total is 204
Computing square of 9
Running total is 285
>>> # heapq.merge   <== designed to merge sorted sequences
>>> 
>>> def mymap(func, iterable):
	return [func(x) for x in iterable]

>>> total = 0
>>> for s in mymap(square, range(10)):
	total += s
	print 'Running total is', total

	
Computing square of 0
Computing square of 1
Computing square of 2
Computing square of 3
Computing square of 4
Computing square of 5
Computing square of 6
Computing square of 7
Computing square of 8
Computing square of 9
Running total is 0
Running total is 1
Running total is 5
Running total is 14
Running total is 30
Running total is 55
Running total is 91
Running total is 140
Running total is 204
Running total is 285
>>> def mymap(func, iterable):
	for x in iterable:
		yield func(x)

		
>>> def myimap(func, iterable):
	for x in iterable:
		yield func(x)

		
>>> total = 0
>>> for s in myimap(square, range(10)):
	total += s
	print 'Running total is', total

	
Computing square of 0
Running total is 0
Computing square of 1
Running total is 1
Computing square of 2
Running total is 5
Computing square of 3
Running total is 14
Computing square of 4
Running total is 30
Computing square of 5
Running total is 55
Computing square of 6
Running total is 91
Computing square of 7
Running total is 140
Computing square of 8
Running total is 204
Computing square of 9
Running total is 285
>>> from random import shuffle
>>> s = ['one', 'two', 'three', 'four', 'five']
>>> shuffle(s)
>>> s
['three', 'one', 'four', 'five', 'two']
>>> shuffle(s)
>>> s
['five', 'three', 'four', 'one', 'two']
>>> def myimap_unordered(func, iterable):
	values = list(iterable)
	shuffle(values)
	for x in value:
		yield func(x)

		
>>> def myimap_unordered(func, iterable):
	values = list(iterable)
	shuffle(values)
	for x in values:
		yield func(x)

		
>>> total = 0
>>> for s in myimap_unordered(square, range(10)):
	total += s
	print 'Running total is', total

	
Computing square of 4
Running total is 16
Computing square of 2
Running total is 20
Computing square of 6
Running total is 56
Computing square of 1
Running total is 57
Computing square of 9
Running total is 138
Computing square of 5
Running total is 163
Computing square of 7
Running total is 212
Computing square of 0
Running total is 212
Computing square of 8
Running total is 276
Computing square of 3
Running total is 285
>>> 
>>> 
>>> # map     imap          imap_unordered
>>> 
>>> 
>>> # C.O.W.
>>> # have a big in memory
>>> # launch multiprocess   ---> many processes that share the same input memory
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> seqs = [[10, 20, 30, 40], [15, 25, 28, 31, 42, 48], [4, 14, 24, 26], [10], [], [ 32, 38]]
>>> from itertools import chain
>>> for x in seqs:
	print x

	
[10, 20, 30, 40]
[15, 25, 28, 31, 42, 48]
[4, 14, 24, 26]
[10]
[]
[32, 38]
>>> for x in chain.from_iterable(seq):
	print x

	

Traceback (most recent call last):
  File "<pyshell#157>", line 1, in <module>
    for x in chain.from_iterable(seq):
NameError: name 'seq' is not defined
>>> for x in chain.from_iterable(seqs):
	print x

	
10
20
30
40
15
25
28
31
42
48
4
14
24
26
10
32
38
>>> for x in chain('abc', 'def'):
	print x

	
a
b
c
d
e
f
>>> for x in chain(['abc', 'def']):
	print x

	
abc
def
>>> for x in chain.from_iterable(['abc', 'def']):
	print x

	
a
b
c
d
e
f
>>> seqs
[[10, 20, 30, 40], [15, 25, 28, 31, 42, 48], [4, 14, 24, 26], [10], [], [32, 38]]
>>> sorted(chain.from_iterable(seqs))
[4, 10, 10, 14, 15, 20, 24, 25, 26, 28, 30, 31, 32, 38, 40, 42, 48]
>>> import heapq
>>> it = heapq.merge(*seqs)
>>> it
<generator object merge at 0x105f3cf50>
>>> next(it)
4
>>> next(it)
10
>>> next(it)
10
>>> next(it)
14
>>> next(it)
15
>>> 
>>> 
>>> 
>>> 
>>> 
>>> def f(a, b, c):
	print a
	print b
	print c

	
>>> args = [10, 20, 30]
>>> f(args)

Traceback (most recent call last):
  File "<pyshell#187>", line 1, in <module>
    f(args)
TypeError: f() takes exactly 3 arguments (1 given)
>>> f(args[0], args[1], args[2])
10
20
30
>>> f(*args)
10
20
30
>>> 
>>> 
>>> 
>>> 
>>> def show_squares(n):
	print 'Show squares upto', n
	print '-------------------'
	for i in range(n):
		print i**2

		
>>> show_squares(8)
Show squares upto 8
-------------------
0
1
4
9
16
25
36
49
>>> def show_squares(n):
	yield 'Show squares upto', n
	yield '-------------------'
	for i in range(n):
		yield i**2

		
>>> show_squares(8)
<generator object show_squares at 0x105f44050>
>>> it = show_squares(8)
>>> next(it)
('Show squares upto', 8)
>>> next(it)
'-------------------'
>>> next(it)
0
>>> next(it)
1
>>> def show_squares(n):
	yield 'Show squares up to %d', n
	yield '----------------------'
	for i in range(n):
		yield i**2

		
>>> for line in show_squares(10):
	print line
	print

	
('Show squares up to %d', 10)

----------------------

0

1

4

9

16

25

36

49

64

81

>>> def show_squares(n):
	yield 'Show squares up to %d' % n
	yield '----------------------'
	for i in range(n):
		yield i**2

		
>>> for line in show_squares(10):
	print line.upper()
	print

	
SHOW SQUARES UP TO 10

----------------------


Traceback (most recent call last):
  File "<pyshell#218>", line 2, in <module>
    print line.upper()
AttributeError: 'int' object has no attribute 'upper'
>>> for line in show_squares(10):
	print str(line).upper()
	print

	
SHOW SQUARES UP TO 10

----------------------

0

1

4

9

16

25

36

49

64

81

>>> def show_squares(n):
	yield 'Show squares up to %d' % n
	yield '----------------------'
	for i in range(n):
		yield str(i**2)

		
>>> list(show_squares(10))
['Show squares up to 10', '----------------------', '0', '1', '4', '9', '16', '25', '36', '49', '64', '81']
>>> map(str.upper, show_squares(10))
['SHOW SQUARES UP TO 10', '----------------------', '0', '1', '4', '9', '16', '25', '36', '49', '64', '81']
>>> s = '\n'.join(show_squares(10))
>>> s
'Show squares up to 10\n----------------------\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81'
>>> 
>>> # Write a function using many prints.  Convert to yield.  Externally join the result together.
>>> 
=============================== RESTART: Shell ===============================
>>> 
>>> 
>>> 
>>> x = 10
>>> locals() == globals()
True
>>> locals()['x']
10
>>> globals()['x']
10
>>> 
>>> 
>>> print x**2
100
>>> print locals()['x'] ** 2
100
>>> globals()['x'] = 11
>>> x
11
>>> # Variable writes always go to locals() unless declared as global
>>> # Variable lookups go from locals() nested_scopes, globals()  builtins   NameError
>>> 
>>> def len(obj):
	return 42

>>> len('hello')
42
>>> __builtins__.len('hello')
5
>>> del len
>>> len('hello')
5
>>> 
=============================== RESTART: Shell ===============================
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__']
>>> # Variable writes always go to locals() unless declared as global
>>> #    And, if __builtins__ is not in globals(), it gets added
>>> # Variable lookups go from locals() nested_scopes, globals()  builtins   NameError
>>> 
>>> 30 + 40*2
110
>>> expr = raw_input('Enter an expression: ')
Enter an expression: 30 + 40*2
>>> expr
'30 + 40*2'
>>> eval(expr)
110
>>> 
>>> 
>>> expr = raw_input('Enter an expression: ')
Enter an expression: x = 30 + 40*2
>>> eval(expr)

Traceback (most recent call last):
  File "<pyshell#264>", line 1, in <module>
    eval(expr)
  File "<string>", line 1
    x = 30 + 40*2
      ^
SyntaxError: invalid syntax
>>> 
>>> 
>>> expr
'x = 30 + 40*2'
>>> exec expr
>>> x
110
>>> 
>>> 
>>> 
>>> 
>>> y = 200
>>> exec 'z = y**2'
>>> z
40000
>>> # by default, exec uses globals() and locals()
>>> 
>>> g = {'a': 10, 'b': 20}
>>> l = {'a': 15}
>>> exec 'c = a + b + len("abc")' in g, l
>>> l
{'a': 15, 'c': 38}
>>> g.keys()
['a', '__builtins__', 'b']
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> a = {}
>>> b = {}
>>> exec 'c=10' in a, b
>>> a.keys()
['__builtins__']
>>> b
{'c': 10}
>>> 
>>> 
>>> d = {}
>>> exec 'c=10' in d, d
>>> d.keys()
['__builtins__', 'c']
>>> d['c']
10
>>> 
>>> 
>>> 
>>> 
>>> 
>>> print 'The answer is %d today' % 10
The answer is 10 today
>>> print 'The answer is %d today' % 2 ** 5
The answer is 32 today
>>> print 'The answer is %d today' % 2 * 5
The answer is 2 todayThe answer is 2 todayThe answer is 2 todayThe answer is 2 todayThe answer is 2 today
>>> print 'The answer is %d today' % (2 * 5)
The answer is 10 today
>>> print 'This %s and that %s' % ('abc', 'def')
This abc and that def
>>> print 'This %s and that %s' % ['abc', 'def']

Traceback (most recent call last):
  File "<pyshell#311>", line 1, in <module>
    print 'This %s and that %s' % ['abc', 'def']
TypeError: not enough arguments for format string
>>> print 'This %s' % ['abc', 'def']
This ['abc', 'def']
>>> 
>>> 
>>> 
>>> d = {'name': 'Raymond', 'age': 51}
>>> print '%(name)s is %(age)d years old' % d
Raymond is 51 years old
>>> print 'Senor %(name)s hay %(age) anos compleanos' % d

Traceback (most recent call last):
  File "<pyshell#318>", line 1, in <module>
    print 'Senor %(name)s hay %(age) anos compleanos' % d
ValueError: unsupported format character 'a' (0x61) at index 26
>>> print 'Senor %(name)s hay %(age)d anos compleanos' % d
Senor Raymond hay 51 anos compleanos
>>> 
>>> 
>>> print '{name} is {age} years old'.format(age=51, name='raymond')
raymond is 51 years old
>>> print '{name!r} is {age} years old'.format(age=51, name='raymond')
'raymond' is 51 years old
>>> 
>>> 
>>> class Person:
	pass

>>> p = Person()
>>> p.name = 'Raymond'
>>> p.age = 51
>>> 
>>> p.name
'Raymond'
>>> p.age
51
>>> print '{person.name} is {person.age} years old'.format(person=person)

Traceback (most recent call last):
  File "<pyshell#335>", line 1, in <module>
    print '{person.name} is {person.age} years old'.format(person=person)
NameError: name 'person' is not defined
>>> print '{person.name} is {person.age} years old'.format(person=p)
Raymond is 51 years old
>>> 
>>> 
>>> print 'The answer is {answer}'.format(answer=3.1415926535)
The answer is 3.1415926535
>>> print 'The answer is {answer:.3f}'.format(answer=3.1415926535)
The answer is 3.142
>>> print 'The answer is {answer}'.format(answer=123456789)
The answer is 123456789
>>> print 'The answer is {answer:,d}'.format(answer=123456789)
The answer is 123,456,789
>>> print '{person.name} is {person.age:5d} years old'.format(person=p)
Raymond is    51 years old
>>> print '{person.name} is {person.age:05d} years old'.format(person=p)
Raymond is 00051 years old
>>> print '{person.name} is {person.age:x5d} years old'.format(person=p)

Traceback (most recent call last):
  File "<pyshell#345>", line 1, in <module>
    print '{person.name} is {person.age:x5d} years old'.format(person=p)
ValueError: Invalid conversion specification
>>> print '{person.name} is {person.age:<5d} years old'.format(person=p)
Raymond is 51    years old
>>> print '{person.name} is {person.age:>5d} years old'.format(person=p)
Raymond is    51 years old
>>> print '{person.name} is {person.age:^5d} years old'.format(person=p)
Raymond is  51   years old
>>> 
>>> 
>>> 
>>> 
>>> 
>>> def twopow(exp):
	return 2 ** exp

>>> def threepow(exp):
	return 3 ** exp

>>> pow_template = '''
def {name}pow(exp):
	return {base} ** exp
'''
>>> 
>>> print pow_template.format(name='four', base=4)

def fourpow(exp):
	return 4 ** exp

>>> fourpow(5)

Traceback (most recent call last):
  File "<pyshell#365>", line 1, in <module>
    fourpow(5)
NameError: name 'fourpow' is not defined
>>> 
>>> 
>>> exec pow_template.format(name='four', base=4)
>>> fourpow(5)
1024
>>> l = {}
>>> exec pow_template.format(name='four', base=4) in globals(), l
>>> l
{'fourpow': <function fourpow at 0x10437d140>}
>>> l['fourpow'](1024)
32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656L
>>> 
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
{'lastname': 'Smith', 'age': 15, 'kind': 'p'}
{'lastname': 'Jones', 'age': 9, 'kind': 'p'}
{'kind': 'c', 'firstname': 'Raymond', 'height': 63.7}
>>> pow_template = '''\
def {name}pow(exp):
	return {base} ** exp
'''
>>> print pow_template.format(name='four', base=4)
def fourpow(exp):
	return 4 ** exp

>>> # 1:30
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
 Goal:

            lastname = str(data[i:i+8]).rstrip()
            i += 8


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            lastname = str(data[i:i+8]).rstrip()
            i += 8

 Goal:

            lastname = str(data[i:i+8]).rstrip()
            i += 8


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            firstname = str(data[i:i+10]).rstrip()
            i += 10

 Goal:

            lastname = str(data[i:i+8]).rstrip()
            i += 8


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/codegen.py", line 55, in <module>
    print other_line.format(fname=fname, ftype=ftype, width=fwidth)
KeyError: 'Fname'
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/codegen.py", line 55, in <module>
    print other_line.format(fname=fname, ftype=ftype, width=fwidth)
KeyError: 'fwidth'
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            age = <type 'int'>(data[i:i+4])
            i += 4

 Goal:

            age = int(data[i:i+4])
            i += 4


>>> int
<type 'int'>
>>> int.__name__
'int'
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            age = int(data[i:i+4])
            i += 4

 Goal:

            age = int(data[i:i+4])
            i += 4


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            height = float(data[i:i+12])
            i += 12

 Goal:

            age = int(data[i:i+4])
            i += 4


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            lastname = str(data[i:i+8]).rstrip()
            i += 8

            age = int(data[i:i+4])
            i += 4

 Goal:

            lastname = str(data[i:i+8]).rstrip()
            i += 8
            age = int(data[i:i+4])
            i += 4


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            military_id = str(data[i:i+12]).rstrip()
            i += 12

            blood_type = str(data[i:i+2]).rstrip()
            i += 2

            rank = int(data[i:i+2])
            i += 2

 Goal:

            lastname = str(data[i:i+8]).rstrip()
            i += 8
            age = int(data[i:i+4])
            i += 4


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
 Goal:

            print dict(kind=kind, lastname=lastname, age=age)


>>> fnames
['lastname', 'age']
>>> fname = 'lastname';        goal='lastname=lastname'
>>> pair_template = '{fname}={fname}'
>>> pair_template.format(fname='lastname')
'lastname=lastname'
>>> [pair_template.format(fname=fname) for fname in fnames]
['lastname=lastname', 'age=age']
>>> pairs = ', '.join([pair_template.format(fname=fname) for fname in fnames])
>>> pairs
'lastname=lastname, age=age'
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
 Goal:

            print dict(kind=kind, lastname=lastname, age=age)


>>> pairs
['lastname=lastname', 'age=age']
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            print dict(kind=kind, lastname=lastname, age=age)

 Goal:

            print dict(kind=kind, lastname=lastname, age=age)


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)

 Goal:

            print dict(kind=kind, lastname=lastname, age=age)


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
            military_id = str(data[i:i+12]).rstrip()
            i += 12

            blood_type = str(data[i:i+2]).rstrip()
            i += 2

            rank = int(data[i:i+2])
            i += 2

            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)

 Goal:

            print dict(kind=kind, lastname=lastname, age=age)


>>> pairs
['military_id=military_id', 'blood_type=blood_type', 'rank=rank']
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
        elif kind == 'c':

            firstname = str(data[i:i+10]).rstrip()
            i += 10

            height = float(data[i:i+12])
            i += 12

            print dict(kind=kind, firstname=firstname, height=height)

 Goal:

        elif kind == 'c':
            firstname = str(data[i:i+10]).rstrip()
            i += 10
            height = float(data[i:i+12])
            i += 12
            print dict(kind=kind, firstname=firstname, height=height)


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
        elif kind == 'a':

            hometown = str(data[i:i+20]).rstrip()
            i += 20

            pop_density = float(data[i:i+15])
            i += 15

            long = float(data[i:i+8])
            i += 8

            lat = float(data[i:i+4])
            i += 4

            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)

        elif kind == 'c':

            firstname = str(data[i:i+10]).rstrip()
            i += 10

            height = float(data[i:i+12])
            i += 12

            print dict(kind=kind, firstname=firstname, height=height)

        elif kind == 'd':

            coursename = str(data[i:i+20]).rstrip()
            i += 20

            coursenumber = int(data[i:i+4])
            i += 4

            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)

        elif kind == 'n':

            station_name = str(data[i:i+13]).rstrip()
            i += 13

            station_number = int(data[i:i+5])
            i += 5

            response_time = float(data[i:i+8])
            i += 8

            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)

        elif kind == 'q':

            military_id = str(data[i:i+12]).rstrip()
            i += 12

            blood_type = str(data[i:i+2]).rstrip()
            i += 2

            rank = int(data[i:i+2])
            i += 2

            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)

        elif kind == 'p':

            lastname = str(data[i:i+8]).rstrip()
            i += 8

            age = int(data[i:i+4])
            i += 4

            print dict(kind=kind, lastname=lastname, age=age)

 Goal:

        elif kind == 'c':
            firstname = str(data[i:i+10]).rstrip()
            i += 10
            height = float(data[i:i+12])
            i += 12
            print dict(kind=kind, firstname=firstname, height=height)


>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
def parse(data):
    'Parse a variable length record format'
    i = 0
    while i < len(data):
        kind = data[i]
        i += 1
        if 0:
            pass

        elif kind == 'a':

            hometown = str(data[i:i+20]).rstrip()
            i += 20

            pop_density = float(data[i:i+15])
            i += 15

            long = float(data[i:i+8])
            i += 8

            lat = float(data[i:i+4])
            i += 4

            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)

        elif kind == 'c':

            firstname = str(data[i:i+10]).rstrip()
            i += 10

            height = float(data[i:i+12])
            i += 12

            print dict(kind=kind, firstname=firstname, height=height)

        elif kind == 'd':

            coursename = str(data[i:i+20]).rstrip()
            i += 20

            coursenumber = int(data[i:i+4])
            i += 4

            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)

        elif kind == 'n':

            station_name = str(data[i:i+13]).rstrip()
            i += 13

            station_number = int(data[i:i+5])
            i += 5

            response_time = float(data[i:i+8])
            i += 8

            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)

        elif kind == 'q':

            military_id = str(data[i:i+12]).rstrip()
            i += 12

            blood_type = str(data[i:i+2]).rstrip()
            i += 2

            rank = int(data[i:i+2])
            i += 2

            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)

        elif kind == 'p':

            lastname = str(data[i:i+8]).rstrip()
            i += 8

            age = int(data[i:i+4])
            i += 4

            print dict(kind=kind, lastname=lastname, age=age)

        else:
            raise ValueError('Unknown kind: ' + kind)

>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
def parse(data):
    'Parse a variable length record format'
    i = 0
    while i < len(data):
        kind = data[i]
        i += 1
        if 0:
            pass

        elif kind == 'a':

            hometown = str(data[i:i+20]).rstrip()
            i += 20

            pop_density = float(data[i:i+15])
            i += 15

            long = float(data[i:i+8])
            i += 8

            lat = float(data[i:i+4])
            i += 4

            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)

        elif kind == 'c':

            firstname = str(data[i:i+10]).rstrip()
            i += 10

            height = float(data[i:i+12])
            i += 12

            print dict(kind=kind, firstname=firstname, height=height)

        elif kind == 'd':

            coursename = str(data[i:i+20]).rstrip()
            i += 20

            coursenumber = int(data[i:i+4])
            i += 4

            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)

        elif kind == 'n':

            station_name = str(data[i:i+13]).rstrip()
            i += 13

            station_number = int(data[i:i+5])
            i += 5

            response_time = float(data[i:i+8])
            i += 8

            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)

        elif kind == 'q':

            military_id = str(data[i:i+12]).rstrip()
            i += 12

            blood_type = str(data[i:i+2]).rstrip()
            i += 2

            rank = int(data[i:i+2])
            i += 2

            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)

        elif kind == 'p':

            lastname = str(data[i:i+8]).rstrip()
            i += 8

            age = int(data[i:i+4])
            i += 4

            print dict(kind=kind, lastname=lastname, age=age)

        else:
            raise ValueError('Unknown kind: ' + kind)

>>> 
>>> 
>>> 
>>> goal = '            print dict(kind=kind, firstname=firstname, height=height)'
>>> fspecs = [('firstname', str, 10), ('height', float, 12)]
>>> 
>>> 
>>> dict_line = '            print dict(kind=kind, {pairs})'
>>> print dict_line.format(pairs='firstname=firstname, height=height')
            print dict(kind=kind, firstname=firstname, height=height)
>>> print goal
            print dict(kind=kind, firstname=firstname, height=height)
>>> 
>>> 
>>> goal = 'firstname=firstname, height=height'
>>> fspecs = [('firstname', str, 10), ('height', float, 12)]
>>> 
>>> for fname, ftype, fwidth in fspecs:
	print fname

	
firstname
height
>>> for fname, ftype, fwidth in fspecs:
	print fname + '=' + fname

	
firstname=firstname
height=height
>>> for fname, ftype, fwidth in fspecs:
	print '%s=%s' % fname

	

Traceback (most recent call last):
  File "<pyshell#411>", line 2, in <module>
    print '%s=%s' % fname
TypeError: not enough arguments for format string
>>> for fname, ftype, fwidth in fspecs:
	print '%s=%s' % (fname, fname)

	
firstname=firstname
height=height
>>> for fname, ftype, fwidth in fspecs:
	print '{fname}={fname}'.format(fname=fname)

	
firstname=firstname
height=height
>>> 
>>> pairs = []
>>> for fname, ftype, fwidth in fspecs:
	pair = '{fname}={fname}'.format(fname=fname)
	pairs.append(pair)

	
>>> pairs
['firstname=firstname', 'height=height']
>>> ', '.join(pairs)
'firstname=firstname, height=height'
>>> 
>>> pairs = ['{fname}={fname}'.format(fname=fname) for fname, ftype, fwidth in fspecs]
>>> pairs
['firstname=firstname', 'height=height']
>>> pairs = ['{fname}={fname}'.format(fname=fname) for fname, ftype, fwidth in fspecs]
>>> 
>>> pair_template = '{fname}={fname}'
>>> pairs = [pair_template.format(fname=fname) for fname, ftype, fwidth in fspecs]
>>> pairs
['firstname=firstname', 'height=height']
>>> 
>>> pair_joiner = ', '
>>> print pair_joiner.join(pairs)
firstname=firstname, height=height
>>> print '            print dict(kind=kind, firstname=firstname, height=height)'
            print dict(kind=kind, firstname=firstname, height=height)
>>> print '            print dict(kind=kind, lastname=lastname, age=age)'
            print dict(kind=kind, lastname=lastname, age=age)
>>> dict_line = '            print dict(kind=kind, {pairs})'
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
def parse(data):
    'Parse a variable length record format'
    i = 0
    while i < len(data):
        kind = data[i]
        i += 1
        if 0:
            pass

        elif kind == 'a':

            hometown = str(data[i:i+20]).rstrip()
            i += 20

            pop_density = float(data[i:i+15])
            i += 15

            long = float(data[i:i+8])
            i += 8

            lat = float(data[i:i+4])
            i += 4

            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)

        elif kind == 'c':

            firstname = str(data[i:i+10]).rstrip()
            i += 10

            height = float(data[i:i+12])
            i += 12

            print dict(kind=kind, firstname=firstname, height=height)

        elif kind == 'd':

            coursename = str(data[i:i+20]).rstrip()
            i += 20

            coursenumber = int(data[i:i+4])
            i += 4

            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)

        elif kind == 'n':

            station_name = str(data[i:i+13]).rstrip()
            i += 13

            station_number = int(data[i:i+5])
            i += 5

            response_time = float(data[i:i+8])
            i += 8

            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)

        elif kind == 'q':

            military_id = str(data[i:i+12]).rstrip()
            i += 12

            blood_type = str(data[i:i+2]).rstrip()
            i += 2

            rank = int(data[i:i+2])
            i += 2

            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)

        elif kind == 'p':

            lastname = str(data[i:i+8]).rstrip()
            i += 8

            age = int(data[i:i+4])
            i += 4

            print dict(kind=kind, lastname=lastname, age=age)

        else:
            raise ValueError('Unknown kind: ' + kind)

>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
>>> next(it)
"def parse(data):\n    'Parse a variable length record format'\n    i = 0\n    while i < len(data):\n        kind = data[i]\n        i += 1\n        if 0:\n            pass\n"
>>> next(it)
"        elif kind == 'a':\n"
>>> next(it)
'            hometown = str(data[i:i+20]).rstrip()\n            i += 20\n'
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
def parse(data):
    'Parse a variable length record format'
    i = 0
    while i < len(data):
        kind = data[i]
        i += 1
        if 0:
            pass
        elif kind == 'a':
            hometown = str(data[i:i+20]).rstrip()
            i += 20
            pop_density = float(data[i:i+15])
            i += 15
            long = float(data[i:i+8])
            i += 8
            lat = float(data[i:i+4])
            i += 4
            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)
        elif kind == 'c':
            firstname = str(data[i:i+10]).rstrip()
            i += 10
            height = float(data[i:i+12])
            i += 12
            print dict(kind=kind, firstname=firstname, height=height)
        elif kind == 'd':
            coursename = str(data[i:i+20]).rstrip()
            i += 20
            coursenumber = int(data[i:i+4])
            i += 4
            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)
        elif kind == 'n':
            station_name = str(data[i:i+13]).rstrip()
            i += 13
            station_number = int(data[i:i+5])
            i += 5
            response_time = float(data[i:i+8])
            i += 8
            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)
        elif kind == 'q':
            military_id = str(data[i:i+12]).rstrip()
            i += 12
            blood_type = str(data[i:i+2]).rstrip()
            i += 2
            rank = int(data[i:i+2])
            i += 2
            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)
        elif kind == 'p':
            lastname = str(data[i:i+8]).rstrip()
            i += 8
            age = int(data[i:i+4])
            i += 4
            print dict(kind=kind, lastname=lastname, age=age)
        else:
            raise ValueError('Unknown kind: ' + kind)

>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
def parse(data):
    'Parse a variable length record format'
    i = 0
    while i < len(data):
        kind = data[i]
        i += 1
        if 0:
            pass
        elif kind == 'a':
            hometown = str(data[i:i+20]).rstrip()
            i += 20
            pop_density = float(data[i:i+15])
            i += 15
            long = float(data[i:i+8])
            i += 8
            lat = float(data[i:i+4])
            i += 4
            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)
        elif kind == 'c':
            firstname = str(data[i:i+10]).rstrip()
            i += 10
            height = float(data[i:i+12])
            i += 12
            print dict(kind=kind, firstname=firstname, height=height)
        elif kind == 'd':
            coursename = str(data[i:i+20]).rstrip()
            i += 20
            coursenumber = int(data[i:i+4])
            i += 4
            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)
        elif kind == 'n':
            station_name = str(data[i:i+13]).rstrip()
            i += 13
            station_number = int(data[i:i+5])
            i += 5
            response_time = float(data[i:i+8])
            i += 8
            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)
        elif kind == 'q':
            military_id = str(data[i:i+12]).rstrip()
            i += 12
            blood_type = str(data[i:i+2]).rstrip()
            i += 2
            rank = int(data[i:i+2])
            i += 2
            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)
        elif kind == 'p':
            lastname = str(data[i:i+8]).rstrip()
            i += 8
            age = int(data[i:i+4])
            i += 4
            print dict(kind=kind, lastname=lastname, age=age)
        else:
            raise ValueError('Unknown kind: ' + kind)

>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
{'lastname': 'Smith', 'age': 15, 'kind': 'p'}
{'lastname': 'Jones', 'age': 9, 'kind': 'p'}
{'kind': 'c', 'firstname': 'Raymond', 'height': 63.7}
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/codegen.py ==========
def parse(data):
    'Parse a variable length record format'
    i = 0
    while i < len(data):
        kind = data[i]
        i += 1
        if 0:
            pass
        elif kind == 'a':
            hometown = str(data[i:i+20]).rstrip()
            i += 20
            pop_density = float(data[i:i+15])
            i += 15
            long = float(data[i:i+8])
            i += 8
            lat = float(data[i:i+4])
            i += 4
            print dict(kind=kind, hometown=hometown, pop_density=pop_density, long=long, lat=lat)
        elif kind == 'c':
            firstname = str(data[i:i+10]).rstrip()
            i += 10
            height = float(data[i:i+12])
            i += 12
            print dict(kind=kind, firstname=firstname, height=height)
        elif kind == 'd':
            coursename = str(data[i:i+20]).rstrip()
            i += 20
            coursenumber = int(data[i:i+4])
            i += 4
            print dict(kind=kind, coursename=coursename, coursenumber=coursenumber)
        elif kind == 'n':
            station_name = str(data[i:i+13]).rstrip()
            i += 13
            station_number = int(data[i:i+5])
            i += 5
            response_time = float(data[i:i+8])
            i += 8
            print dict(kind=kind, station_name=station_name, station_number=station_number, response_time=response_time)
        elif kind == 'q':
            military_id = str(data[i:i+12]).rstrip()
            i += 12
            blood_type = str(data[i:i+2]).rstrip()
            i += 2
            rank = int(data[i:i+2])
            i += 2
            print dict(kind=kind, military_id=military_id, blood_type=blood_type, rank=rank)
        elif kind == 'p':
            lastname = str(data[i:i+8]).rstrip()
            i += 8
            age = int(data[i:i+4])
            i += 4
            print dict(kind=kind, lastname=lastname, age=age)
        else:
            raise ValueError('Unknown kind: ' + kind)

{'lastname': 'Smith', 'age': 15, 'kind': 'p'}
{'lastname': 'Jones', 'age': 9, 'kind': 'p'}
{'kind': 'c', 'firstname': 'Raymond', 'height': 63.7}
>>> 
>>> 
>>> code = '''
def welcome(n):
   for i in range(n):
       print 'Happy, good morning!'
'''
>>> 
>>> 
>>> namespace = {}
>>> exec code in globals(), namespace
>>> 
>>> namespace
{'welcome': <function welcome at 0x1006ef500>}
>>> 
>>> 
>>> f = namespace['welcome']
>>> f(5)
Happy, good morning!
Happy, good morning!
Happy, good morning!
Happy, good morning!
Happy, good morning!
>>> 
>>> 
>>> 
>>> class Person(tuple):
	def __new__(cls, fname, lname, age, email):
		return tuple.__new__(cls, (fname, lname, age, email))

	
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> type(p)
<class '__main__.Person'>
>>> p
('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com', 10)

Traceback (most recent call last):
  File "<pyshell#467>", line 1, in <module>
    p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com', 10)
TypeError: __new__() takes exactly 5 arguments (6 given)
>>> class Person(tuple):
	'Person(fname, lname, age, email)'
	def __new__(cls, fname, lname, age, email):
		return tuple.__new__(cls, (fname, lname, age, email))

	
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> a, b, c, d = p
>>> p[0]
'Raymond'
>>> class Person(tuple):
	'Person(fname, lname, age, email)'
	def __new__(cls, fname, lname, age, email):
		return tuple.__new__(cls, (fname, lname, age, email))
	fname = property(lambda p: p[0], doc="Someone's first name or given name")

	
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> p[0]
'Raymond'
>>> p.fnam

Traceback (most recent call last):
  File "<pyshell#478>", line 1, in <module>
    p.fnam
AttributeError: 'Person' object has no attribute 'fnam'
>>> p.fname
'Raymond'
>>> help(Person)
Help on class Person in module __main__:

class Person(__builtin__.tuple)
 |  Person(fname, lname, age, email)
 |  
 |  Method resolution order:
 |      Person
 |      __builtin__.tuple
 |      __builtin__.object
 |  
 |  Static methods defined here:
 |  
 |  __new__(cls, fname, lname, age, email)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  fname
 |      Someone's first name or given name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from __builtin__.tuple:
 |  
 |  __add__(...)
 |      x.__add__(y) <==> x+y
 |  
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x
 |  
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  __ge__(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __getnewargs__(...)
 |  
 |  __getslice__(...)
 |      x.__getslice__(i, j) <==> x[i:j]
 |      
 |      Use of negative indices is not supported.
 |  
 |  __gt__(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  __hash__(...)
 |      x.__hash__() <==> hash(x)
 |  
 |  __iter__(...)
 |      x.__iter__() <==> iter(x)
 |  
 |  __le__(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  __len__(...)
 |      x.__len__() <==> len(x)
 |  
 |  __lt__(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  __mul__(...)
 |      x.__mul__(n) <==> x*n
 |  
 |  __ne__(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  __repr__(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  __rmul__(...)
 |      x.__rmul__(n) <==> n*x
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.

>>> 
>>> 
>>> class Person(tuple):
	'Person(fname, lname, age, email)'
	def __new__(cls, fname, lname, age, email):
		return tuple.__new__(cls, (fname, lname, age, email))
	fname = property(lambda p: p[0], doc="Someone's first name or given name")
	lname = property(lambda p: p[1], doc="Someone's last name or family name")
	age = property(lambda p: p[2], doc="Chronological age in years")
	email = property(lambda p: p[3], doc="Business email")

	
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> p.lname
'Hettinger'
>>> p.age
51
>>> p
('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> class Person(tuple):
	'Person(fname, lname, age, email)'
	def __new__(cls, fname, lname, age, email):
		return tuple.__new__(cls, (fname, lname, age, email))
	fname = property(lambda p: p[0], doc="Someone's first name or given name")
	lname = property(lambda p: p[1], doc="Someone's last name or family name")
	age = property(lambda p: p[2], doc="Chronological age in years")
	email = property(lambda p: p[3], doc="Business email")
	def __repr__(self):
		return 'Person(fname=%r, lname=%r, age=%r, email=%r)' % self

	
>>> 
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> p
Person(fname='Raymond', lname='Hettinger', age=51, email='python@rcn.com')
>>> 
>>> 
>>> class Person(tuple):
	'Person(fname, lname, age, email)'
	_fields = ['fname', 'lname', 'age', 'email']
	def __new__(cls, fname, lname, age, email):
		return tuple.__new__(cls, (fname, lname, age, email))
	fname = property(lambda p: p[0], doc="Someone's first name or given name")
	lname = property(lambda p: p[1], doc="Someone's last name or family name")
	age = property(lambda p: p[2], doc="Chronological age in years")
	email = property(lambda p: p[3], doc="Business email")
	def __repr__(self):
		return 'Person(fname=%r, lname=%r, age=%r, email=%r)' % self
	def _asdict(self):
		return dict(zip(self._fields, self))

	
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> p.fname
'Raymond'
>>> p.lname
'Hettinger'
>>> p
Person(fname='Raymond', lname='Hettinger', age=51, email='python@rcn.com')
>>> p._fields
['fname', 'lname', 'age', 'email']
>>> p._asdict()
{'lname': 'Hettinger', 'age': 51, 'email': 'python@rcn.com', 'fname': 'Raymond'}
>>> # Employee(emp_id, hire_date, title, supervisor, salary)
>>> 
>>> from collections import namedtuple
>>> Person = namedtuple('Person', ['fname', 'lname', 'age', 'email'])
>>> p = Person('Raymond', 'Hettinger', 51, 'python@rcn.com')
>>> p.fname
'Raymond'
>>> p.lname
'Hettinger'
>>> p._fields
('fname', 'lname', 'age', 'email')
>>> p._asdict()
OrderedDict([('fname', 'Raymond'), ('lname', 'Hettinger'), ('age', 51), ('email', 'python@rcn.com')])
>>> 
>>> 'age': 51, 'email': 'python@rcn.com', 'fname': 'Raymond'}
>>> 
SyntaxError: invalid syntax
>>> 
>>> 
>>> Person = namedtuple('Person', ['fname', 'lname', 'age', 'email'], verbose=True)
class Person(tuple):
    'Person(fname, lname, age, email)'

    __slots__ = ()

    _fields = ('fname', 'lname', 'age', 'email')

    def __new__(_cls, fname, lname, age, email):
        'Create new instance of Person(fname, lname, age, email)'
        return _tuple.__new__(_cls, (fname, lname, age, email))

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new Person object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != 4:
            raise TypeError('Expected 4 arguments, got %d' % len(result))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        return 'Person(fname=%r, lname=%r, age=%r, email=%r)' % self

    def _asdict(self):
        'Return a new OrderedDict which maps field names to their values'
        return OrderedDict(zip(self._fields, self))

    def _replace(_self, **kwds):
        'Return a new Person object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, ('fname', 'lname', 'age', 'email'), _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % kwds.keys())
        return result

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self)

    __dict__ = _property(_asdict)

    def __getstate__(self):
        'Exclude the OrderedDict from pickling'
        pass

    fname = _property(_itemgetter(0), doc='Alias for field number 0')

    lname = _property(_itemgetter(1), doc='Alias for field number 1')

    age = _property(_itemgetter(2), doc='Alias for field number 2')

    email = _property(_itemgetter(3), doc='Alias for field number 3')


>>> 
>>> 
>>> 
>>> x = 10
>>> y = 20
>>> 
>>> t = x
>>> x = y
>>> y = t
>>> del t
>>> 
>>> x
20
>>> y
10
>>> 
>>> x, y = y, x
>>> 
>>> x
10
>>> y
20
>>> import time
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
>>> time.time()
1461105721.445422
>>> time.time()
1461105726.033592
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> for i in range(10):
	print i

	
0
1
2
3
4
5
6
7
8
9
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/how_timeit_works.py", line 14, in <module>
    print inner(time.time, range(10))
  File "/Users/raymond/Dropbox/Public/sj141/how_timeit_works.py", line 12, in inner
    return end - start()
TypeError: 'float' object is not callable
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
1.90734863281e-06
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
0.0429809093475
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
0.0478310585022
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
3.09944152832e-06
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
0.00413084030151
>>> 
>>> for i in [None] * 10:
	print i, 'hello'

	
None hello
None hello
None hello
None hello
None hello
None hello
None hello
None hello
None hello
None hello
>>> 
>>> [1000] * 10
[1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
>>> import itertools
>>> [None] * 10
[None, None, None, None, None, None, None, None, None, None]
>>> it = itertools.repeat(None, 10)
>>> next(it)
>>> next(it)
>>> list(it)
[None, None, None, None, None, None, None, None]
>>> it = itertools.repeat('hello', 5)
>>> next(it)
'hello'
>>> next(it)
'hello'
>>> next(it)
'hello'
>>> next(it)
'hello'
>>> next(it)
'hello'
>>> next(it)

Traceback (most recent call last):
  File "<pyshell#568>", line 1, in <module>
    next(it)
StopIteration
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
0.0430002212524
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
[0.042964935302734375, 0.040307044982910156, 0.04479217529296875]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
0.0409021377563
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
4.06460762024e-08
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
3.93719673157e-08
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
4.05169963837e-08
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
4.07026052475e-08
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
3.46657991409e-08
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj141/how_timeit_works.py ======
3.53876113892e-08
>>> 
=========== RESTART: /Users/raymond/Dropbox/Public/sj141/sample.py ===========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> 
=============================== RESTART: Shell ===============================
>>> 
>>> 
>>> 


>>> 



>>> 



>>> 







>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample.n
20
>>> sample.squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361]
>>> sample.cube(11)
1331
>>> help(sample)
Help on module sample:

NAME
    sample - A simple demonstration of Python

FILE
    /Users/raymond/Dropbox/Public/sj141/sample.py

FUNCTIONS
    cube(x)

DATA
    i = 19
    n = 20
    squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196...


>>> type(sample)
<type 'module'>
>>> sample.__name__
'sample'
>>> sample.__file__
'sample.py'
>>> sample.__dict__
{'squares': [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361], '__builtins__': {'bytearray': <type 'bytearray'>, 'IndexError': <type 'exceptions.IndexError'>, 'all': <built-in function all>, 'help': Type help() for interactive help, or help(object) for help about object., 'vars': <built-in function vars>, 'SyntaxError': <type 'exceptions.SyntaxError'>, 'unicode': <type 'unicode'>, 'UnicodeDecodeError': <type 'exceptions.UnicodeDecodeError'>, 'memoryview': <type 'memoryview'>, 'isinstance': <built-in function isinstance>, 'copyright': Copyright (c) 2001-2015 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'NameError': <type 'exceptions.NameError'>, 'BytesWarning': <type 'exceptions.BytesWarning'>, 'dict': <type 'dict'>, 'input': <built-in function input>, 'oct': <built-in function oct>, 'bin': <built-in function bin>, 'SystemExit': <type 'exceptions.SystemExit'>, 'StandardError': <type 'exceptions.StandardError'>, 'format': <built-in function format>, 'repr': <built-in function repr>, 'sorted': <built-in function sorted>, 'False': False, 'RuntimeWarning': <type 'exceptions.RuntimeWarning'>, 'list': <type 'list'>, 'iter': <built-in function iter>, 'reload': <built-in function reload>, 'Warning': <type 'exceptions.Warning'>, '__package__': None, 'round': <built-in function round>, 'dir': <built-in function dir>, 'cmp': <built-in function cmp>, 'set': <type 'set'>, 'bytes': <type 'str'>, 'reduce': <built-in function reduce>, 'intern': <built-in function intern>, 'issubclass': <built-in function issubclass>, 'Ellipsis': Ellipsis, 'EOFError': <type 'exceptions.EOFError'>, 'locals': <built-in function locals>, 'BufferError': <type 'exceptions.BufferError'>, 'slice': <type 'slice'>, 'FloatingPointError': <type 'exceptions.FloatingPointError'>, 'sum': <built-in function sum>, 'getattr': <built-in function getattr>, 'abs': <built-in function abs>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'print': <built-in function print>, 'True': True, 'FutureWarning': <type 'exceptions.FutureWarning'>, 'ImportWarning': <type 'exceptions.ImportWarning'>, 'None': None, 'hash': <built-in function hash>, 'ReferenceError': <type 'exceptions.ReferenceError'>, 'len': <built-in function len>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'frozenset': <type 'frozenset'>, '__name__': '__builtin__', 'ord': <built-in function ord>, 'super': <type 'super'>, '_': None, 'TypeError': <type 'exceptions.TypeError'>, 'license': Type license() to see the full license text, 'KeyboardInterrupt': <type 'exceptions.KeyboardInterrupt'>, 'UserWarning': <type 'exceptions.UserWarning'>, 'filter': <built-in function filter>, 'range': <built-in function range>, 'staticmethod': <type 'staticmethod'>, 'SystemError': <type 'exceptions.SystemError'>, 'BaseException': <type 'exceptions.BaseException'>, 'pow': <built-in function pow>, 'RuntimeError': <type 'exceptions.RuntimeError'>, 'float': <type 'float'>, 'MemoryError': <type 'exceptions.MemoryError'>, 'StopIteration': <type 'exceptions.StopIteration'>, 'globals': <built-in function globals>, 'divmod': <built-in function divmod>, 'enumerate': <type 'enumerate'>, 'apply': <built-in function apply>, 'LookupError': <type 'exceptions.LookupError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'basestring': <type 'basestring'>, 'UnicodeError': <type 'exceptions.UnicodeError'>, 'zip': <built-in function zip>, 'hex': <built-in function hex>, 'long': <type 'long'>, 'next': <built-in function next>, 'ImportError': <type 'exceptions.ImportError'>, 'chr': <built-in function chr>, 'xrange': <type 'xrange'>, 'type': <type 'type'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'Exception': <type 'exceptions.Exception'>, 'tuple': <type 'tuple'>, 'UnicodeTranslateError': <type 'exceptions.UnicodeTranslateError'>, 'reversed': <type 'reversed'>, 'UnicodeEncodeError': <type 'exceptions.UnicodeEncodeError'>, 'IOError': <type 'exceptions.IOError'>, 'hasattr': <built-in function hasattr>, 'delattr': <built-in function delattr>, 'setattr': <built-in function setattr>, 'raw_input': <built-in function raw_input>, 'SyntaxWarning': <type 'exceptions.SyntaxWarning'>, 'compile': <built-in function compile>, 'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'str': <type 'str'>, 'property': <type 'property'>, 'GeneratorExit': <type 'exceptions.GeneratorExit'>, 'int': <type 'int'>, '__import__': <built-in function __import__>, 'KeyError': <type 'exceptions.KeyError'>, 'coerce': <built-in function coerce>, 'PendingDeprecationWarning': <type 'exceptions.PendingDeprecationWarning'>, 'file': <type 'file'>, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, 'unichr': <built-in function unichr>, 'id': <built-in function id>, 'OSError': <type 'exceptions.OSError'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'min': <built-in function min>, 'UnicodeWarning': <type 'exceptions.UnicodeWarning'>, 'execfile': <built-in function execfile>, 'any': <built-in function any>, 'complex': <type 'complex'>, 'bool': <type 'bool'>, 'ValueError': <type 'exceptions.ValueError'>, 'NotImplemented': NotImplemented, 'map': <built-in function map>, 'buffer': <type 'buffer'>, 'max': <built-in function max>, 'object': <type 'object'>, 'TabError': <type 'exceptions.TabError'>, 'callable': <built-in function callable>, 'ZeroDivisionError': <type 'exceptions.ZeroDivisionError'>, 'eval': <built-in function eval>, '__debug__': True, 'IndentationError': <type 'exceptions.IndentationError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'classmethod': <type 'classmethod'>, 'UnboundLocalError': <type 'exceptions.UnboundLocalError'>, 'NotImplementedError': <type 'exceptions.NotImplementedError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'OverflowError': <type 'exceptions.OverflowError'>}, '__file__': 'sample.py', 'n': 20, 'i': 19, 'cube': <function cube at 0x1006ef488>, '__name__': 'sample', '__package__': None, '__doc__': 'A simple demonstration of Python'}
>>> 
>>> 
>>> 
>>> sample.__dict__.keys()
['squares', '__builtins__', '__file__', 'n', 'i', 'cube', '__name__', '__package__', '__doc__']
>>> sample.__doc__
'A simple demonstration of Python'
>>> 
>>> 
>>> 
>>> # __name__, __package__ __doc__  __dict__
>>> 
>>> 
>>> 

>>> 
>>> 
>>> 
>>> sample.n
20
>>> sample.i
19
>>> 
>>> var = 'n'
>>> sample.var

Traceback (most recent call last):
  File "<pyshell#603>", line 1, in <module>
    sample.var
AttributeError: 'module' object has no attribute 'var'
>>> 
>>> getattr(sample, var)
20
>>> var = 'i'
>>> getattr(sample, var)
19
>>> 
>>> sample.n = 50
>>> 
>>> var = 'n'
>>> sample.var = 15
>>> sample.n
50
>>> setattr(sample, var, 15)
>>> sample.n
15
>>> 
>>> del sample.n
>>> sample.n

Traceback (most recent call last):
  File "<pyshell#618>", line 1, in <module>
    sample.n
AttributeError: 'module' object has no attribute 'n'
>>> 
>>> 
>>> 
>>> var = 'i'
>>> del sample.var
>>> 
>>> delattr(sample, var)
>>> dir(sample)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'cube', 'squares']
>>> 
>>> 
>>> 
>>> # sample.n            sample.n = 10               del sample.n
>>> # getattr(sample, 'n') setattr(sample, 'n', 10)   delattr(sample, 'n')
>>> 
>>> # --> AttributeError
>>> 
>>> 
>>> import sample
>>> 
Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
'A simple demonstration of Python'

n = 20

squares = [i**2 for i in range(n)]

print 'The sum of squares is %d' % sum(squares)

def cube(x):
    return x**3

print map(cube, range(n))

>>> type(code)
<type 'str'>
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> type(namespace)
<type 'dict'>
>>> namespace.keys()
['i', 'cube', 'squares', '__doc__', 'n']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
{'__doc__': 'A simple demonstration of Python',
 'cube': <function cube at 0x10423ded8>,
 'i': 19,
 'n': 20,
 'squares': [0,
             1,
             4,
             9,
             16,
             25,
             36,
             49,
             64,
             81,
             100,
             121,
             144,
             169,
             196,
             225,
             256,
             289,
             324,
             361]}
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample.__dict__.keys()
['squares', '__builtins__', '__file__', 'n', 'i', 'cube', '__name__', '__package__', '__doc__']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
{'__doc__': 'A simple demonstration of Python',
 '__file__': 'sample.py',
 '__name__': 'sample',
 '__package__': None,
 'cube': <function cube at 0x104168ed8>,
 'i': 19,
 'n': 20,
 'squares': [0,
             1,
             4,
             9,
             16,
             25,
             36,
             49,
             64,
             81,
             100,
             121,
             144,
             169,
             196,
             225,
             256,
             289,
             324,
             361]}
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> type(namespace)
<type 'dict'>
>>> namespace['n']
20
>>> 
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> type(sample)
<type 'module'>
>>> sample.n
20
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> type(sample)
<class '__main__.Module'>
>>> sample.namespace
{'squares': [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361], 'i': 19, '__file__': 'sample.py', 'n': 20, 'cube': <function cube at 0x10533eed8>, '__name__': 'sample', '__package__': None, '__doc__': 'A simple demonstration of Python'}
>>> 
>>> sample.n
20
>>> sample.cube(11)
1331
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample.n = 50
>>> sample.namespace
{'squares': [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361], 'i': 19, '__file__': 'sample.py', 'n': 20, 'cube': <function cube at 0x1042480c8>, '__name__': 'sample', '__package__': None, '__doc__': 'A simple demonstration of Python'}
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 32, in <module>
    sample = myimport('sample')
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 28, in myimport
    return Module(namespace)
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 8, in __init__
    self.namespace = namespace
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 14, in __setattr__
    self.namespace[attrname] = value
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__

=============================== RESTART: Shell ===============================
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample.n = 50
>>> sample.namespace['n']
50
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample
<__main__.Module object at 0x104c63d90>
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample
<module 'sample' from '/Users/raymond/Dropbox/Public/sj141/sample.pyc'>
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample
<Module 'sample' from 'sample.py'>
>>> 
>>> 
>>> import random
>>> dir(random)
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodType', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_acos', '_ceil', '_cos', '_e', '_exp', '_hashlib', '_hexlify', '_inst', '_log', '_pi', '_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'division', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> dir(sample)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> dir(sample)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattr__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'namespace']
>>> sorted(sample.namespace.keys())
['__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> dir(sample)
['__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> class A:
	pass

>>> a = A()
>>> dir(a)
['__doc__', '__module__']
>>> class A(object):
	pass

>>> a = A()
>>> dir(a)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> class A(object):
	def __init__(self, somedict):
		self.somedict = somedict
		self.x = 10

		
>>> a = A()

Traceback (most recent call last):
  File "<pyshell#56>", line 1, in <module>
    a = A()
TypeError: __init__() takes exactly 2 arguments (1 given)
>>> 
>>> 
>>> 
>>> 
>>> 


>>> 






>>> 



>>> class A(object):
	def __init__(self, somedict):
		self.somedict = somedict
		self.x = 10

		
>>> a = A({'raymond': 'red', 'rachel': 'blue'})
>>> 
>>> a.__dict__
{'somedict': {'rachel': 'blue', 'raymond': 'red'}, 'x': 10}
>>> dir(a)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'somedict', 'x']
>>> a.somedict.keys()
['rachel', 'raymond']
>>> class A(object):
	def __init__(self, somedict):
		self.somedict = somedict
		self.x = 10
	def __dir__(self):
		return sorted(self.somedict.keys())

	
>>> a = A({'raymond': 'red', 'rachel': 'blue'})
>>> dir(a)
['rachel', 'raymond']
>>> class A(object):
	def __init__(self, somedict):
		self.somedict = somedict
		self.x = 10
	def __dir__(self):
		return ['tom', 'harry']

	
>>> a = A({'raymond': 'red', 'rachel': 'blue'})
>>> dir(a)
['harry', 'tom']
>>> 
>>> 
>>> 
>>> class B(object):
	def __init__(self, somedict):
		self.__dict__ = somedict

		
>>> b = B({'raymond': 'red', 'rachel': 'blue'})
>>> dir(b)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'rachel', 'raymond']
>>> 
>>> 
>>> 
>>> # Can you replace the __dict__ that is given to every instance?  Yes!
>>> # What does dir() do?  If __dir__ is defined, that is called; otherwise, uses __dict__
>>> 
>>> # Why did Raymond use "namespace" as another dict instead of the usual __dict__?
>>> # We're writing a simulator and there is a need to different the real one from the one we wrote.
>>> 
>>> # Inception:  Dream in a dream in a dream.
>>> # Core problem:  The protagonist lost the ability to differentiate
>>> #             between the real world and the dream.
>>> # Take an artifact from the real world with you that differentiates from the dream.
>>> 
>>> # Metaprogramming IS inception.
>>> # <module 'sample' from 'sample.py'>           <Module 'sample' from 'sample.py'>
>>> #    real and coded in C                            simulated coded in Python
>>> #    fast                                           slower
>>> #    __dict__                                       namespace
>>> #  dir() -->  __dict__                              dir()  -->   __dir__ -->  namespace.keys()
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
s
>>> sample.n
20
>>> sample.xyz

Traceback (most recent call last):
  File "<pyshell#113>", line 1, in <module>
    sample.xyz
AttributeError: 'module' object has no attribute 'xyz'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample.xyz

Traceback (most recent call last):
  File "<pyshell#114>", line 1, in <module>
    sample.xyz
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 11, in __getattr__
    return self.namespace[attrname]
KeyError: 'xyz'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample.xyz

Traceback (most recent call last):
  File "<pyshell#115>", line 1, in <module>
    sample.xyz
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 12, in __getattr__
    raise AttributeError(attrname)
AttributeError: xyz
>>> del sample.xyz

Traceback (most recent call last):
  File "<pyshell#116>", line 1, in <module>
    del sample.xyz
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 21, in __delattr__
    raise AttributeError(attrname)
AttributeError: xyz
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample
<module 'sample' from '/Users/raymond/Dropbox/Public/sj141/sample.pyc'>
>>> sample.xyz = 20
>>> 
=============================== RESTART: Shell ===============================
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample
<module 'sample' from 'sample.pyc'>
>>> globals()['sample']
<module 'sample' from 'sample.pyc'>
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample.n
20
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> sample
<Module 'sample' from 'sample.py'>
>>> 
>>> dir(sample)
['__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> dir(sample)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> dir(sample)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> 
>>> import random
>>> random.choice('abcde')
'c'
>>> myimport('random')

Traceback (most recent call last):
  File "<pyshell#134>", line 1, in <module>
    myimport('random')
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 31, in myimport
    with open(filename) as f:
IOError: [Errno 2] No such file or directory: 'random.py'
>>> random.__file__
'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.pyc'
>>> 
>>> import sys
>>> from pprint import pprint
>>> pprint(sys.path)
['/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7',
 '/Users/raymond/Dropbox/Public/sj141',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/readline-6.2.4.1-py2.7-macosx-10.7-intel.egg',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ats_py2-1.0.4-py2.7.egg',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload',
 '/Users/raymond/Library/Python/2.7/lib/python/site-packages',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages',
 '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/PIL',
 '/Library/Python/2.7/site-packages']
>>> # else-clauses on for loops
>>> 
>>> i = 0
>>> while i < 10:
	i += 1
	if i == 5:
		break

	
>>> i
5
>>> i = 0
>>> while i < 10:
	i += 1
	if i == 15:
		break

	
>>> i
10
>>> 
>>> 
>>> i = 0
>>> while i < 10:
	i += 1
	if i == 15:
		break
else:
	print 'Hit i == 10 and main loop condition failed'

	
Hit i == 10 and main loop condition failed
>>> i = 0
>>> while i < 10:
	i += 1
	if i == 5:
		break
else:
	print 'Hit i == 10 and main loop condition failed'

	
>>> 
>>> target = 'keys'
>>> for thing in ['watch', 'wallet', 'phone', 'keys', 'sunglasses']:
	if thing == target:
		print 'Found!'
		break

	
Found!
>>> for thing in ['watch', 'wallet', 'phone', 'sunglasses']:
	if thing == target:
		print 'Found!'
		break

	
>>> for thing in ['watch', 'wallet', 'phone', 'sunglasses']:
	if thing == target:
		print 'Found!'
		break
else:
	print 'Sorry, I looked everywhere for the', target

	
Sorry, I looked everywhere for the keys
>>> for thing in ['watch', 'wallet', 'phone', 'keys', 'sunglasses']:
	if thing == target:
		print 'Found!'
		break
else:
	print 'Sorry, I looked everywhere for the', target

	
Found!
>>> 
>>> 
>>> 
>>> dirname = '/users/raymond'
>>> filename = 'resume.txt'
>>> 
>>> import os
>>> fullname = os.path.join(dirname, filename)
>>> fullname
'/users/raymond/resume.txt'
>>> 
>>> os.path.split(fullname)
('/users/raymond', 'resume.txt')
>>> os.path.splitext(fullname)
('/users/raymond/resume', '.txt')
>>> os.path.dirname(fullname)
'/users/raymond'
>>> os.path.basename(fullname)
'resume.txt'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py
/Users/raymond/Dropbox/Public/sj141/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/readline-6.2.4.1-py2.7-macosx-10.7-intel.egg/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ats_py2-1.0.4-py2.7.egg/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/sample.py
/Users/raymond/Library/Python/2.7/lib/python/site-packages/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sample.py
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/PIL/sample.py
/Library/Python/2.7/site-packages/sample.py
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 51, in <module>
    myimport('sample')
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 38, in myimport
    with open(fullname) as f:
IOError: [Errno 2] No such file or directory: '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> myimport('xyzpdq')

Traceback (most recent call last):
  File "<pyshell#192>", line 1, in <module>
    myimport('xyzpdq')
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 48, in myimport
    exec code in namespace
UnboundLocalError: local variable 'code' referenced before assignment
>>> import xyzpdq

Traceback (most recent call last):
  File "<pyshell#193>", line 1, in <module>
    import xyzpdq
ImportError: No module named xyzpdq
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
>>> myimport('xyzpdq')

Traceback (most recent call last):
  File "<pyshell#194>", line 1, in <module>
    myimport('xyzpdq')
  File "/Users/raymond/Dropbox/Public/sj141/module_demo.py", line 44, in myimport
    raise ImportError(modname)
ImportError: xyzpdq
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
360
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py'
Trying to open '/Users/raymond/Dropbox/Public/sj141/sample.py'
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.py'
11
>>> 
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> import sample
>>> del sample
>>> import sample
>>> 
>>> import sys
>>> sys.modules.keys()
['heapq', 'code', 'tkFileDialog', 'functools', 'random', 'subprocess', 'sysconfig', 'idlelib.macosxSupport', 'idlelib.PyParse', 'tkSimpleDialog', 'encodings.encodings', 'idlelib.MultiStatusBar', 'idlelib.keybindingDialog', 'idlelib.__future__', 'idlelib.socket', 'idlelib.ReplaceDialog', 'idlelib.UndoDelegator', 'idlelib.tkSimpleDialog', 'idlelib.cPickle', 'imp', 'idlelib.SearchDialogBase', 'collections', 'idlelib.MultiCall', 'idlelib.ColorDelegator', 'zipimport', 'string', 'SocketServer', 'encodings.utf_8', 'idlelib.string', 'idlelib.SearchEngine', 'idlelib.bdb', 'idlelib.SocketServer', 'ConfigParser', 'idlelib.tkFileDialog', 'idlelib.webbrowser', 'idlelib.textwrap', 'idlelib.configSectionNameDialog', 'signal', 'idlelib.IOBinding', 'idlelib.configDialog', 'idlelib.pipes', 'threading', 'token', 'tkMessageBox', 'idlelib.warnings', 'shlex', 'gc', 'idlelib.struct', 'idlelib.help', 'cStringIO', 'google', 'locale', 'idlelib.Bindings', 'idlelib.threading', 'idlelib.TreeWidget', 'idlelib.rpc', 'idlelib.re', 'idlelib.SearchDialog', 'HTMLParser', 'idlelib.tkColorChooser', 'encodings', 'idlelib.RemoteDebugger', 'idlelib.tempfile', 'idlelib.Percolator', 'idlelib.codecs', 'abc', 'tkFont', '_tkinter', 'idlelib.tkFont', 'pipes', 'idlelib.textView', 're', 'idlelib.RemoteObjectBrowser', 'idlelib.platform', 'idlelib.imp', 'idlelib.locale', 'idlelib.thread', 'math', 'idlelib.fnmatch', 'fcntl', 'idlelib.Debugger', 'Tkinter', 'mpl_toolkits', 'idlelib.traceback', 'idlelib.marshal', 'UserDict', 'idlelib.copy', 'Queue', 'fnmatch', 'idlelib.StackViewer', 'codecs', 'idlelib.__builtin__', 'idlelib.copy_reg', 'paste', 'idlelib.GrepDialog', 'struct', '_functools', '_locale', 'idlelib.AutoComplete', 'socket', 'thread', 'idlelib.time', 'traceback', 'ndg', 'weakref', 'tempfile', 'itertools', 'ats', 'idlelib.CallTipWindow', 'os', 'marshal', '__future__', 'idlelib.AutoCompleteWindow', '_collections', 'idlelib.code', '_sre', 'idlelib.Delegator', '__builtin__', 'markupbase', 'idlelib.FileList', 'idlelib.signal', 'operator', 'idlelib.ObjectBrowser', 'select', 'idlelib.os', '_heapq', 'idlelib.ZoomHeight', 'idlelib.ConfigParser', 'posixpath', 'platform', 'errno', 'idlelib.getopt', '_socket', 'binascii', 'sre_constants', 'os.path', '_random', 'idlelib.WidgetRedirector', 'idlelib.PyShell', 'idlelib.tkMessageBox', '_warnings', 'cPickle', 'encodings.__builtin__', 'idlelib.IdleHistory', '_codecs', 'tokenize', '_osx_support', 'webbrowser', 'idlelib.repr', 'idlelib.idlelib', 'copy', 'idlelib.Queue', '_sysconfigdata', '_struct', 'idlelib.aboutDialog', 'hashlib', 'idlelib.configHelpSourceEdit', 'keyword', 'idlelib.keyword', 'repr', 'idlelib.__main__', 'idlelib.sys', 'posix', 'encodings.aliases', 'idlelib.HTMLParser', 'exceptions', 'sre_parse', 'pickle', 'copy_reg', 'sre_compile', '_hashlib', 'idlelib.io', 'site', 'sample', 'SimpleDialog', 'idlelib.dynOptionMenuWidget', 'io', '__main__', 'idlelib.OutputWindow', 'idlelib.types', 'idlelib.EditorWindow', 'tkCommonDialog', 'strop', 'linecache', 'idlelib.tokenize', 'encodings.codecs', '_abcoll', 'idlelib.HyperParser', 'getopt', 'idlelib.linecache', 'genericpath', 'stat', '_ssl', 'warnings', 'idlelib.tabbedpages', 'textwrap', 'sys', 'idlelib.Tkinter', 'idlelib.CallTips', 'idlelib.configHandler', 'idlelib.select', 'codeop', 'idlelib.SimpleDialog', 'tkColorChooser', 'types', 'idlelib.ScrolledList', '_weakref', 'bdb', 'idlelib', 'Tkconstants', '_io', '_weakrefset', 'time', 'idlelib.WindowList', 'idlelib.run']
>>> 

>>> sys.modules['random']
<module 'random' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.pyc'>
>>> sys.modules['random'].randrange()

Traceback (most recent call last):
  File "<pyshell#205>", line 1, in <module>
    sys.modules['random'].randrange()
TypeError: randrange() takes at least 2 arguments (1 given)
>>> sys.modules['random'].randrange(100)
46
>>> del sys.modules['random']
>>> import random
>>> 
>>> 
>>> import sample
>>> import sys
>>> del sys.modules['sample']
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> les['sample']

Traceback (most recent call last):
  File "<pyshell#215>", line 1, in <module>
    les['sample']

NameError: name 'les' is not defined
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> g = {}
>>> m = {}
>>> 
>>> x = [10, 20, 30]
>>> g['x'] = x
>>> m['x'] = x
>>> 
>>> 
>>> x
[10, 20, 30]
>>> g
{'x': [10, 20, 30]}
>>> m
{'x': [10, 20, 30]}
>>> del x
>>> g
{'x': [10, 20, 30]}
>>> m
{'x': [10, 20, 30]}
>>> del g['x']
>>> g
{}
>>> m
{'x': [10, 20, 30]}
>>> del m['x']
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
=============================== RESTART: Shell ===============================
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> globals()['sample']
<module 'sample' from 'sample.pyc'>
>>> import sys
>>> sys.modules['sample']
<module 'sample' from 'sample.pyc'>
>>> 
>>> del sample
>>> globals()['sample']

Traceback (most recent call last):
  File "<pyshell#251>", line 1, in <module>
    globals()['sample']
KeyError: 'sample'
>>> sample

Traceback (most recent call last):
  File "<pyshell#252>", line 1, in <module>
    sample
NameError: name 'sample' is not defined
>>> sys.modules['sample']
<module 'sample' from 'sample.pyc'>
>>> del sys.modules['sample']
>>> 

>>> x = [10, 20, 30]
>>> 
>>> 
>>> 
=============================== RESTART: Shell ===============================
>>> g = {}
>>> g['x'] = [10, 20, 30]
>>> m = {}
>>> m['x'] = g['x']
>>> 
>>> 
>>> g
{'x': [10, 20, 30]}
>>> m
{'x': [10, 20, 30]}
>>> 
>>> del g['x'][:]
>>> g
{'x': []}
>>> m
{'x': []}
>>> 
>>> 
>>> 
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> sample.__dict__.clear()
>>> sample
<module '?' (built-in)>
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py'
Trying to open '/Users/raymond/Dropbox/Public/sj141/sample.py'
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.py'
45
>>> modules
{'sample': <Module 'sample' from 'sample.py'>, 'random': <Module 'random' from 'random.py'>}
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py'
Trying to open '/Users/raymond/Dropbox/Public/sj141/sample.py'
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.py'
359
>>> myimport('sample')
>>> modules.keys()
['sample', 'random']
>>> 
>>> 
>>> del modules['sample']
>>> myimport('sample')
Trying to open '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sample.py'
Trying to open '/Users/raymond/Dropbox/Public/sj141/sample.py'
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> 
=============================== RESTART: Shell ===============================
>>> import sample
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
>>> import sample
>>> reload(sample)
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
<module 'sample' from 'sample.pyc'>
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
418
>>> myreload(sample)
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
<Module 'sample' from 'sample.py'>
>>> myreload(sample)
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
<Module 'sample' from 'sample.py'>
>>> myimport('sample')
>>> myreload(sample)
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
<Module 'sample' from 'sample.py'>
>>> import http://users.rcn.com/python/download/puzzle.py
SyntaxError: invalid syntax
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/module_demo.py ========
The sum of squares is 2470
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859]
20
1331
335
>>> dir()
['Module', '__builtins__', '__doc__', '__file__', '__name__', '__package__', 'modules', 'myimport', 'myreload', 'os', 'puzzle', 'random', 'sample', 'sys', 'urllib']
>>> dir(puzzle)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'cube', 'i', 'n', 'squares']
>>> 
>>> 
>>> 
>>> 
>>> 
