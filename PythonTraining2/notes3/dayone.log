Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> # Do more and more work but less and less often
>>> s = [1, 0, 2, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0]
>>> s = [1, 0, 2, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 16] + [0] * 15
>>> s
[1, 0, 2, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
>>> cs = [0]
>>> for x in s:
	cs.append(cs[-1] + x)

	
>>> cs
[0, 1, 1, 3, 3, 3, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]
>>> [x // i for i, x in enumerate(cs, 1)]
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
>>> [format(x / float(i), '.2f') for i, x in enumerate(cs, 1)]
['0.00', '0.50', '0.33', '0.75', '0.60', '0.50', '1.00', '0.88', '0.78', '0.70', '1.36', '1.25', '1.15', '1.07', '1.00', '0.94', '0.88', '0.83', '0.79', '1.55', '1.48', '1.41', '1.35', '1.29', '1.24', '1.19', '1.15', '1.11', '1.07', '1.03', '1.00', '0.97', '0.94', '0.91', '0.89']
>>> s = [1] * 32
>>> s
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
>>> cs = [0]
>>> for x in s:
	cs.append(cs[-1] + x)

	
>>> cs
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
>>> [format(x / float(i), '.2f') for i, x in enumerate(cs, 1)]
['0.00', '0.50', '0.67', '0.75', '0.80', '0.83', '0.86', '0.88', '0.89', '0.90', '0.91', '0.92', '0.92', '0.93', '0.93', '0.94', '0.94', '0.94', '0.95', '0.95', '0.95', '0.95', '0.96', '0.96', '0.96', '0.96', '0.96', '0.96', '0.97', '0.97', '0.97', '0.97', '0.97']
>>> 
>>> 
>>> 
>>> s = 'jack and jill went up a hill to fetch a pail of water, how weird'
>>> hex(abs(hash(s)))
'0x5eba04e8ebf03f4d'
>>> import hashlib
>>> hashlib.md5(s).hexdigest()
'bc4c0c8ceaccde8ed4dfe787613084c5'
>>> hashlib.md5(s).digest()
'\xbcL\x0c\x8c\xea\xcc\xde\x8e\xd4\xdf\xe7\x87a0\x84\xc5'
>>> len(_)
16
>>> # Python hash(s) takes 8 bytes
>>> # md5 takes 16 bytes
>>> len(hashlib.sha1(s).digest())
20
>>> len(hashlib.sha128(s).digest())

Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    len(hashlib.sha128(s).digest())
AttributeError: 'module' object has no attribute 'sha128'
>>> len(hashlib.sha228(s).digest())

Traceback (most recent call last):
  File "<pyshell#33>", line 1, in <module>
    len(hashlib.sha228(s).digest())
AttributeError: 'module' object has no attribute 'sha228'
>>> dir(hashlib)
['__all__', '__builtins__', '__doc__', '__file__', '__get_builtin_constructor', '__name__', '__package__', '_hashlib', '_trans_36', '_trans_5C', 'algorithms', 'algorithms_available', 'algorithms_guaranteed', 'binascii', 'md5', 'new', 'pbkdf2_hmac', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'struct']
>>> len(hashlib.sha224(s).digest())
28
>>> len(hashlib.sha256(s).digest())
32
>>> len(hashlib.sha512(s).digest())
64
>>> 
>>> 
>>> 
>>> 
>>> # x < y            x.__cmp__(y) --> -1, 0, 1            x.__lt__(y) ->  True or False
>>> 
>>> dir(int)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
>>> 
>>> 
>>> x = 5; y = 10;  print x < y ;  print x.__cmp__(y)
True
-1
>>> x = 10; y = 10;  print x < y ;  print x.__cmp__(y)
False
0
>>> x = 15; y = 10;  print x < y ;  print x.__cmp__(y)
False
1
>>> x = 5; y = 10;  print x < y ;  print x.__cmp__(y) == -1
True
True
>>> x = 10; y = 10;  print x < y ;  print x.__cmp__(y) == -1
False
False
>>> x = 15; y = 10;  print x < y ;  print x.__cmp__(y) == -1
False
False
>>> 
>>> 
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> 
>>> x = 'goodbye'; y = 'hello' ; print x < y; print x.__lt__(y)
True
True
>>> x = 'hello'; y = 'hello' ; print x < y; print x.__lt__(y)
False
False
>>> x = 'welcome'; y = 'hello' ; print x < y; print x.__lt__(y)
False
False
>>> # __cmp__ ==> -1, 0, 1
>>> # __lt__ __le__ __eq__ __ne__ __ge__ __gt__
>>> 
>>> class Int(int):
	def __cmp__(self, other):
		print 'Woot!'
		return int.__cmp__(self, other)

	
>>> x = Int(30)
>>> y = Int(40)
>>> x < y
Woot!
True
>>> 
>>> 
>>> ord('A')
65
>>> ord('B')
66
>>> ord(' ')
32
>>> [ord('R'), ord('a'), ord('y'), ord('m'), ord('o'), ord('n'), ord('d')]
[82, 97, 121, 109, 111, 110, 100]
>>> map(ord, 'Raymond')
[82, 97, 121, 109, 111, 110, 100]
>>> 
>>> pow(2, 5)
32
>>> map(pow, [2, 2, 2, 2, 2], range(1, 6))
[2, 4, 8, 16, 32]
>>> [pow(2, 1), pow(2, 2), pow(2, 3), pow(2, 4), pow(2, 5)]
[2, 4, 8, 16, 32]
>>> 
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> 
>>> 
>>> 'ABC'.isupper()
True
>>> 'ABC'.islower()
False
>>> 
>>> 
>>> bm = 'ABC' . isupper
>>> bm()
True
>>> 
>>> str.isupper('ABC')
True
>>> um = str.isupper
>>> um('ABC')
True
>>> 
>>> 
>>> map(str.isupper, 'Raymond')
[True, False, False, False, False, False, False]
>>> map(str.islower, 'Raymond')
[False, True, True, True, True, True, True]
>>> 
>>> filter(str.islower, 'Raymond')
'aymond'
>>> filter(str.isupper, 'Raymond')
'R'
>>> 
>>> filter(lambda x: x%2==0, range(20))
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
>>> 
>>> def myfilter(pred, iterable):
	result = []
	for x in iterable:
		if pred(x):
			result.append(x)
	return result

>>> myfilter(lambda x: x%2==0, range(20))
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
>>> 
>>> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
>>> filter(lambda x: x%2==0, range(20))
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
>>> [x for x in range(20) if x%2==0]
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
>>> 
>>> 
>>> 
>>> print str('hello')
hello
>>> print repr('hello')
'hello'
>>> 
>>> 
>>> 
>>> print 30 + 40
70
>>> print '7' + '0'
70
>>> 
>>> 30 + 40
70
>>> '7' + '0'
'70'
>>> (30 + 40) * 5
350
>>> ('7' + '0') * 5
'7070707070'
>>> # http://bit.ly/python-sj141
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
>>> 
=============================== RESTART: Shell ===============================
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

>>> 
>>> 
>>> 
>>> map(lambda x: x**2, [10, 20, 30])
[100, 400, 900]
>>> 
>>> 
>>> type(42)
<type 'int'>
>>> 42 * 5
210
>>> str(42)
'42'
>>> str(42) * 5
'4242424242'
>>> map(str, [10, 20, 30, 40])
['10', '20', '30', '40']
>>> type('10')
<type 'str'>
>>> map(type, map(str, [10, 20, 30, 40]))
[<type 'str'>, <type 'str'>, <type 'str'>, <type 'str'>]
>>> map(type, map(Int, [10, 20, 30, 40]))
[<class '__main__.Int'>, <class '__main__.Int'>, <class '__main__.Int'>, <class '__main__.Int'>]
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

>>> map(hex, map(id, s))
['0x104395b48', '0x104397758', '0x104397950', '0x1043973b0', '0x104396e60', '0x104396950', '0x104396c20', '0x10439f518', '0x10439f128']
>>> hex(id(e))
'0x1043973b0'
>>> 
>>> # sorting O(n log n)
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
>>> 
>>> 
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons

>>> 
>>> 
>>> cuts = [60, 70, 80, 90]
>>> grades = 'FDCBA'
>>> bisect(cuts, 55)

Traceback (most recent call last):
  File "<pyshell#159>", line 1, in <module>
    bisect(cuts, 55)
TypeError: 'module' object is not callable
>>> bisect.bisect(cuts, 55)
0
>>> bisect.bisect(cuts, 85)
3
>>> grades[bisect.bisect(cuts, 85)]
'B'
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons

>>> cuts = [60, 70, 80, 90]
>>> grades = 'FDCBA'
>>> grades[bisect(cuts, 55)]
'F'
>>> [grades[bisect(cuts, score) for score in 95, 81, 70, 75, 89, 99, 54, 80, 68]
 
SyntaxError: invalid syntax
>>> [grades[bisect(cuts, score)] for score in 95, 81, 70, 75, 89, 99, 54, 80, 68]
['A', 'B', 'C', 'C', 'B', 'A', 'F', 'B', 'D']
>>> 
>>> 
>>> # lin sear O(n)
>>> # sort O(n log n)
>>> # bisect O(log n)
>>> 2 ** 7
128
>>> 2 ** 10
1024
>>> math.log(1000, 2)
9.965784284662087
>>> math.log(1000000, 2)
19.931568569324174
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons

>>> 
>>> 
>>> dir(int)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> 
>>> 
>>> hash('raymond')
2729357497184525765
>>> hex(hash('raymond'))
'0x25e0a02ed4bb9dc5'
>>> 'raymond'.__hash__()
2729357497184525765
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/instrument.py", line 46, in <module>
    reset(); print a in s; show()            # Linear search, left-to-right.  When there is no match, takes len(s) comparisons
  File "/Users/raymond/Dropbox/Public/sj141/instrument.py", line 20, in show
    print '%d comparisons and %d hashes\n' % (cmp_cnt,)
TypeError: not enough arguments for format string
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing %r
Hashing %r
Hashing %r
Comparing 10 to 10
Hashing %r
Hashing %r
Hashing %r
Comparing 20 to 20
Hashing %r
Comparing 20 to 20
Hashing %r
Hashing %r
3 comparisons and 9 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 5
Hashing 10
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Hashing 20
Comparing 20 to 20
Hashing 20
Comparing 20 to 20
Hashing 30
Hashing 50
3 comparisons and 9 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

Hashing 50
True
0 comparisons and 1 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

Hashing 50
True
0 comparisons and 1 hashes

0 comparisons and 0 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 20
Hashing 30
Hashing 40
Hashing 300
Hashing 400
Hashing 500
Hashing 300
Comparing 300 to 300
Hashing 400
Comparing 400 to 400
Hashing 5
Hashing 10
Hashing 15
Hashing 20
Comparing 20 to 20
Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

Hashing 50
True
0 comparisons and 1 hashes

0 comparisons and 0 hashes

>>> s
set([5, 10, 15, 50, 20, 30])
>>> odata
set([5, 40, 10, 300, 15, 400, 20, 500, 30])
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 20
Hashing 30
Hashing 40
Hashing 300
Hashing 400
Hashing 500
Hashing 300
Comparing 300 to 300
Hashing 400
Comparing 400 to 400
Hashing 5
Hashing 10
Hashing 15
Hashing 20
Comparing 20 to 20
Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

Hashing 50
True
0 comparisons and 1 hashes

0 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([10, 20, 5, 30, 15])
3 comparisons and 0 hashes

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 20
Hashing 30
Hashing 40
Hashing 300
Hashing 400
Hashing 500
Hashing 300
Comparing 300 to 300
Hashing 400
Comparing 400 to 400
Hashing 5
Hashing 10
Hashing 15
Hashing 20
Comparing 20 to 20
Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

Hashing 50
True
0 comparisons and 1 hashes

0 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([10, 20, 5, 30, 15])
3 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([5, 40, 10, 300, 15, 400, 50, 20, 500, 30])
3 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([50])
3 comparisons and 0 hashes

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
>>> type(checker)
<type 'list'>
>>> len(checker)
41
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Now,
iss
the
tymme
for
all
guhd
men
tooo
comee
to
the
ayd
of
thur
country
and
city.
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Now
iss
the
tymme
for
all
guhd
men
tooo
comee
to
the
ayd
of
thur
country
and
city
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
Now
iss
tymme
guhd
tooo
comee
ayd
thur
and
city
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
and
city
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 31, in <module>
    spell_check(text)
TypeError: spell_check() takes exactly 2 arguments (1 given)
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
and
city
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
gatsby
fitzgerald
parke
d'invilliers
years
i've
criticizing
haven't
advantages
you've
didn't
we've
i'm
inclined
judgments
has
opened
natures
bores
appears
griefs
confidences
realized
revelations
terms
marred
suppressions
reserving
judgments
suggested
decencies
parcelled
has
founded
marshes
don't
it's
founded
wanted
wanted
excursions
glimpses
gatsby
gives
gatsby
represented
gestures
heightened
promises
machines
earthquakes
gatsby
preyed
gatsby
floated
dreams
sorrows
elations
generations
carraways
we're
descended
dukes
buccleuch
grandfather's
started
carries
i'm
hangs
father's
participated
delayed
enjoyed
seemed
aunts
uncles
talked
faces
delays
rooms
lawns
trees
suggested
sounded
cooked
muttered
arrived
asked
walked
conferred
bursts
trees
things
movies
pulled
volumes
securities
secrets
midas
books
editorials
things
specialists
isn't
looked
strangest
communities
extends
curiosities
formations
eggs
separated
domesticated
ovals
columbus
gulls
yards
squeezed
places
tel
normandy
acres
gatsby's
didn't
gatsby
overlooked
neighbor's
millionaires
dollars
palaces
glittered
begins
buchanans
i'd
chicago
accomplishments
ends
played
savors
he'd
chicago
he'd
ponies
don't
france
drifted
played
didn't
daisy's
happened
friends
expected
overlooking
started
jumping
dials
walks
gardens
reached
vines
windows
legs
changed
years
eyes
seemed
moved
conveyed
liked
hated
guts
don't
matters
seemed
i'm
stronger
approved
wanted
talked
minutes
i've
eyes
moved
including
roses
bumped
belonged
demaine
we'll
walked
windows
windows
seemed
blew
blew
curtains
flags
rippled
women
buoyed
dresses
moments
curtains
windows
died
curtains


Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 34, in <module>
    spell_check(text, checker)
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 13, in spell_check
    print word
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/idlelib/PyShell.py", line 1356, in write
    return self.shell.write(s, self.tags)
KeyboardInterrupt
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> from random import *
>>> random()
0.29085909424119627
>>> # 1 in 2 ** 53
>>> seed(8675309)
>>> random()
0.40224696110279223
>>> 
>>> choice(['win', 'lose', 'draw'])
'lose'
>>> [choice(['win', 'lose', 'draw']) for i in range(10)]
['lose', 'draw', 'win', 'lose', 'lose', 'win', 'draw', 'win', 'win', 'draw']
>>> # ^-- sampling WITH replacement
>>> 
>>> sample(['win', 'lose', 'draw'], 2)
['lose', 'win']
>>> sample(['win', 'lose', 'draw'], 1)
['win']
>>> sample(['win', 'lose', 'draw'], 3)
['win', 'lose', 'draw']
>>> ['safe'] * 5 + ['bang']
['safe', 'safe', 'safe', 'safe', 'safe', 'bang']
>>> sample(['safe'] * 5 + ['bang'], 1)
['safe']
>>> sample(['safe'] * 5 + ['bang'], 1)
['bang']
>>> sample(['safe'] * 5 + ['bang'], 1)
['safe']
>>> sample(['safe'] * 5 + ['bang'], 6)
['bang', 'safe', 'safe', 'safe', 'safe', 'safe']
>>> sample(['safe'] * 5 + ['bang'], 6)
['bang', 'safe', 'safe', 'safe', 'safe', 'safe']
>>> 
>>> 
>>> randrange(100000)
1082
>>> randrange(100000)
24520
>>> randrange(100000)
60899
>>> range(20)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> randrange(20)
9
>>> range(1000, 2000, 100)
[1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]
>>> randrange(1000, 2000, 100)
1800
>>> range(1, 57)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]
>>> randrange(1, 57)
10
>>> [randrange(1, 57) for i in range(6)]
[2, 46, 27, 21, 14, 33]
>>> [randrange(1, 57) for i in range(6)]
[18, 29, 21, 38, 50, 41]
>>> [randrange(1, 57) for i in range(6)]
[43, 7, 12, 49, 22, 51]
>>> [randrange(1, 57) for i in range(6)]
[6, 5, 54, 48, 4, 43]
>>> [randrange(1, 57) for i in range(6)]
[17, 10, 18, 13, 34, 12]
>>> [randrange(1, 57) for i in range(6)]
[54, 5, 40, 15, 14, 46]
>>> [randrange(1, 57) for i in range(6)]
[32, 53, 24, 17, 37, 15]
>>> [randrange(1, 57) for i in range(6)]
[47, 14, 23, 25, 50, 26]
>>> [randrange(1, 57) for i in range(6)]
[4, 37, 13, 44, 37, 52]
>>> [randrange(1, 57) for i in range(6)]
[9, 4, 31, 15, 6, 51]
>>> [randrange(1, 57) for i in range(6)]
[14, 19, 21, 19, 8, 21]
>>> sample(range(1, 57), 6)
[52, 32, 46, 48, 55, 16]
>>> sorted(sample(range(1, 57), 6))
[10, 14, 19, 25, 40, 48]
>>> r = range(1, 57)
>>> xr = range(1, 57)
>>> 
>>> r[6]
7
>>> xr[6]
7
>>> r = range(1, 57)
>>> xr = xrange(1, 57)
>>> r[6]
7
>>> xr[6]
7
>>> len(r)
56
>>> len(xr)
56
>>> r[6] = 99999
>>> xr[6] = 99999

Traceback (most recent call last):
  File "<pyshell#245>", line 1, in <module>
    xr[6] = 99999
TypeError: 'xrange' object does not support item assignment
>>> 
>>> sorted(sample(xrange(1, 57), 6))
[8, 14, 16, 18, 29, 55]
>>> seed('raymond')
>>> sorted(sample(xrange(1, 57), 6))
[11, 12, 16, 22, 23, 42]
>>> 
>>> # 2-to-3.py
>>> 
>>> 
>>> 
>>> 
>>> hettingers = 'raymond rachel matthew ramon gayle dennis sharon'.split()
>>> for person in hettingers:
	seed(person)
	print sorted(sample(xrange(56), 6)), '<--', person

	
[10, 11, 15, 21, 22, 41] <-- raymond
[8, 16, 29, 31, 44, 54] <-- rachel
[4, 10, 13, 25, 30, 47] <-- matthew
[6, 21, 32, 41, 46, 51] <-- ramon
[4, 6, 19, 20, 33, 55] <-- gayle
[9, 19, 23, 33, 38, 53] <-- dennis
[12, 20, 32, 38, 41, 43] <-- sharon
>>> 
>>> 
>>> hett = set()
>>> for person in hettingers:
	seed(person)
	lucky = set(sample(xrange(56), 6))
	hett.update(lucky)

	
>>> hett
set([4, 6, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 38, 41, 43, 44, 46, 47, 51, 53, 54, 55])
>>> 6 * 7
42
>>> len(hett)
31
>>> 
>>> 
>>> name = 'rachel'
>>> seed(name);  set(sample(xrange(56), 6)) <= hett
True
>>> seed('john');  set(sample(xrange(56), 6)) <= hett
False
>>> seed('john');  set(sample(xrange(56), 6)) & hett
set([51, 38, 23])
>>> set([51, 38, 23])
set([51, 38, 23])
>>> 31.0 / 56
0.5535714285714286
>>> (31.0 / 56) ** 6
0.028776767037057886
>>> 1 / (31.0 / 56) ** 6
34.750255256687765
>>> 
>>> 
>>> hett = set()
>>> for person in hettingers:
	seed(person)
	lucky = set(sample(xrange(100), 8))
	hett.update(lucky)

	
>>> hett
set([3, 8, 12, 14, 16, 17, 19, 22, 23, 24, 29, 30, 35, 37, 38, 40, 41, 43, 44, 47, 49, 52, 58, 59, 60, 62, 64, 65, 66, 68, 72, 74, 75, 76, 77, 78, 83, 85, 86, 88, 91, 94])
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
>>> hettingers.population
xrange(56)
>>> hettingers.probes
6
>>> hettingers.data
set([41, 10, 11, 15, 21, 22])
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
>>> hettingers.population
xrange(56)
>>> hettingers.probes
6
>>> hettingers.data
set([4, 54, 8, 41, 10, 11, 44, 13, 15, 16, 21, 22, 25, 47, 29, 30, 31])
>>> len(hettingers.data)
17
>>> list('abc')
['a', 'b', 'c']
>>> tuple('abc')
('a', 'b', 'c')
>>> min('abc')
'a'
>>> max('abc')
'c'
>>> sorted('abc')
['a', 'b', 'c']
>>> set('abracadabara')
set(['a', 'r', 'b', 'c', 'd'])
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
>>> len(hettingers.data)
31
>>> hettingers.data
set([4, 6, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 38, 41, 43, 44, 46, 47, 51, 53, 54, 55])
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> {10, 20, 30} <= {20, 30, 40}
False
>>> {10, 20, 30} <= {10, 20, 30, 40, 50}
True
>>> len('raymond rachel matthew ramon gayle dennis sharon')
48
>>> hettingers.data
set([768, 641, 642, 772, 264, 521, 388, 783, 400, 145, 658, 788, 661, 278, 663, 644, 413, 414, 34, 167, 297, 940, 685, 174, 303, 946, 820, 54, 442, 607, 832, 449, 194, 197, 583, 206, 592, 888, 852, 85, 88, 859, 476, 863, 225, 354, 867, 356, 553, 103, 860, 438, 747, 621, 239, 496, 753, 373, 247, 120, 123, 720, 125, 382, 767])
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> hettingers.data
set([4, 6, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 38, 41, 43, 44, 46, 47, 51, 53, 54, 55])
>>> 
>>> 
>>> s = [10, 20] * 4
>>> s
[10, 20, 10, 20, 10, 20, 10, 20]
>>> s = [0] * 56
>>> s
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> s[4] = 1
>>> s[6] = 1
>>> s[8] = 1
>>> s[9] = 1
>>> s
[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> for i in hettingers.data:
	s[i] = 1

	
>>> s
[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1]
>>> s[10]
1
>>> s[14]
0
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> hettingers.data
[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1]
>>> all([True, True, True, True])
True
>>> all([True, True, False, True])
False
>>> any([True, True, False, True])
True
>>> any([False, False, False, False])
False
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj141/instrument.py =========
Comparing 111 to 10
Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
Comparing 111 to 20
Comparing 111 to 5
Comparing 111 to 10
Comparing 111 to 15
Comparing 111 to 20
False
9 comparisons and 0 hashes

Comparing 20 to 10
Comparing 20 to 20
True
2 comparisons and 0 hashes

Comparing 50 to 10
Comparing 50 to 20
Comparing 50 to 30
True
3 comparisons and 0 hashes

Expected sort cost: 28.529325013
Comparing 20 to 10
Comparing 30 to 20
Comparing 50 to 30
Comparing 20 to 50
Comparing 20 to 30
Comparing 20 to 20
Comparing 5 to 20
Comparing 5 to 20
Comparing 5 to 10
Comparing 10 to 20
Comparing 10 to 10
Comparing 10 to 20
Comparing 15 to 20
Comparing 15 to 10
Comparing 15 to 10
Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
18 comparisons and 0 hashes

Comparing 111 to 20
Comparing 111 to 30
Comparing 111 to 50
3 comparisons and 0 hashes

Comparing 20 to 20
Comparing 20 to 30
Comparing 20 to 20
3 comparisons and 0 hashes

Comparing 50 to 20
Comparing 50 to 30
Comparing 50 to 50
3 comparisons and 0 hashes

Comparing 19 to 20
Comparing 19 to 10
Comparing 19 to 15
3 comparisons and 0 hashes

Hashing 20
Hashing 30
Hashing 40
Hashing 300
Hashing 400
Hashing 500
Hashing 300
Comparing 300 to 300
Hashing 400
Comparing 400 to 400
Hashing 5
Hashing 10
Hashing 15
Hashing 20
Comparing 20 to 20
Hashing 10
Hashing 20
Hashing 30
Hashing 50
Hashing 20
Comparing 20 to 20
Hashing 5
Hashing 10
Comparing 10 to 10
Hashing 15
Hashing 20
Comparing 20 to 20
3 comparisons and 9 hashes

Hashing 111
False
0 comparisons and 1 hashes

Hashing 20
Comparing 20 to 20
True
1 comparisons and 1 hashes

Hashing 50
True
0 comparisons and 1 hashes

Using sets is MUCH cheaper than making them
0 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([10, 20, 5, 30, 15])
3 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([5, 40, 10, 300, 15, 400, 50, 20, 500, 30])
3 comparisons and 0 hashes

Comparing 10 to 10
Comparing 20 to 20
Comparing 30 to 30
set([50])
3 comparisons and 0 hashes

>>> 
>>> 
>>> 
>>> reset(); all(map(Int, [1, 1, 1, 0, 1, 1, 1])); show()
False
0 comparisons and 0 hashes

>>> dir(int)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> # Small integers are prebuilt in an internal array and reused, so they are all singletons
>>> 
>>> # -5 <= x <= 256
>>> 
>>> x = 1000
>>> y = 500 + 500
>>> x == y
True
>>> x is y
False
>>> x = 100
>>> y = 50 + 50
>>> x == y
True
>>> x is y
True
>>> 2792. / 496
5.629032258064516
>>> 
>>> hettingers.data
[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1]
>>> b = butearray(20)

Traceback (most recent call last):
  File "<pyshell#348>", line 1, in <module>
    b = butearray(20)
NameError: name 'butearray' is not defined
>>> b = bytearray(20)
>>> 
>>> len(b)
20
>>> list(b)
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
>>> 
>>> b = bytearray(20)
>>> b[5] = 200
>>> b[10] = 150
>>> list(b)
[0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> b[12] = 'hello'

Traceback (most recent call last):
  File "<pyshell#359>", line 1, in <module>
    b[12] = 'hello'
ValueError: string must be of size 1
>>> b[12] = 350

Traceback (most recent call last):
  File "<pyshell#360>", line 1, in <module>
    b[12] = 350
ValueError: byte must be in range(0, 256)
>>> 
>>> # bytearrays are specialized to hold single numerical byte values 0 <= x < 256
>>> 
>>> type(b[0])
<type 'int'>
>>> # internally, it is stored as an array of bytes
>>> # unsigned char arr[];
>>> 
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> bitarray

Traceback (most recent call last):
  File "<pyshell#368>", line 1, in <module>
    bitarray
NameError: name 'bitarray' is not defined
>>> 
>>> b = bytearray(100)
>>> b[120] = 5

Traceback (most recent call last):
  File "<pyshell#371>", line 1, in <module>
    b[120] = 5
IndexError: bytearray index out of range
>>> b[10] = 500

Traceback (most recent call last):
  File "<pyshell#372>", line 1, in <module>
    b[10] = 500
ValueError: byte must be in range(0, 256)
>>> len(b)
100
>>> 
>>> 
>>> # Bit flipping!
>>> 
>>> format(1234, '10,d')
'     1,234'
>>> format(1234, '10x')
'       4d2'
>>> format(1234, '010x')
'00000004d2'
>>> format(1234, '016b')
'0000010011010010'
>>> 
>>> 
>>> format(1234, '016b')
'0000010011010010'
>>> format(6357, '016b')
'0001100011010101'
>>> 
>>> format(1234 & 6357, '016b')
'0000000011010000'
>>> format(1234 | 6357, '016b')
'0001110011010111'
>>> format(1234 ^ 6357, '016b')
'0001110000000111'
>>> format(1234 >> 5, '016b')
'0000000000100110'
>>> format(1234 << 5, '016b')
'1001101001000000'
>>> format(1234 & ~6357, '016b')
'0000010000000010'
>>> 
>>> x = 1234
>>> format(x, '016b')
'0000010011010010'
>>> # Extract the i-th bit
>>> i = 4
>>> format((x >> i) & 1, '016b')
'0000000000000001'
>>> i = 3
>>> format((x >> i) & 1, '016b')
'0000000000000000'
>>> 
>>> # Set the i-th bit
>>> i = 3
>>> format(1 << i, '016b')
'0000000000001000'
>>> format((1 << i) | x, '016b')
'0000010011011010'
>>> 
>>> # Unset the i-th bit
>>> i = 4
>>> format(1 << i, '016b')
'0000000000010000'
>>> format(x & ~(1 << i), '016b')
'0000010011000010'
>>> 
>>> 
>>> # Hacker's delight
>>> 
>>> 
>>> 
>>> 
>>> 32 // 5
6
>>> 32 % 5
2
>>> divmod(32, 5)
(6, 2)
>>> # ^-- gazinta
>>> 
>>> 
>>> 
>>> -(-32 // 5)
7
>>> 
>>> 
>>> #  11 bits   --> 2
>>> #   8 bits   --> 1
>>> #  16 bints  --> 2
>>> #   9 bits   --> 2
>>> #   7 bits   --> 1
>>> 
>>> -(-11 // 8)
2
>>> -(-8 // 8)
1
>>> -(-16 // 8)
2
>>> -(-9 // 8)
2
>>> -(-7 // 8)
1
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/bitarray.py ==========
>>> b.numbits
20
>>> len(b.data)
3
>>> 
>>> b = bytearray(20)
>>> b[0] = 400

Traceback (most recent call last):
  File "<pyshell#443>", line 1, in <module>
    b[0] = 400
ValueError: byte must be in range(0, 256)
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/bitarray.py ==========
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/bitarray.py ==========
0 1 1 0
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/bitarray.py ==========
0 1 1 0
20
>>> 
>>> b[30] = 1

Traceback (most recent call last):
  File "<pyshell#445>", line 1, in <module>
    b[30] = 1
  File "/Users/raymond/Dropbox/Public/sj141/bitarray.py", line 13, in __setitem__
    raise IndexError('BitArray index out of range')
IndexError: BitArray index out of range
>>> b[10] = 'hello'

Traceback (most recent call last):
  File "<pyshell#446>", line 1, in <module>
    b[10] = 'hello'
  File "/Users/raymond/Dropbox/Public/sj141/bitarray.py", line 15, in __setitem__
    raise ValueError('bit must be in the range(0, 2)')
ValueError: bit must be in the range(0, 2)
>>> b[10] = 5

Traceback (most recent call last):
  File "<pyshell#447>", line 1, in <module>
    b[10] = 5
  File "/Users/raymond/Dropbox/Public/sj141/bitarray.py", line 15, in __setitem__
    raise ValueError('bit must be in the range(0, 2)')
ValueError: bit must be in the range(0, 2)
>>> 
>>> 
>>> 
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/bitarray.py ==========
0 1 1 0
20
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj141/bitarray.py ==========
0 1 1 0
20
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
BitArray('00000001000000100000')
>>> 
>>> 
>>> 
>>> list(b)
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
>>> map(str, b)
['0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0']
>>> ''.join(map(str, b))
'00000001000000100000'
>>> b
BitArray('00000001000000100000')
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/bloomfilter.py ========
True
False
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> hansolo = {
	'ship': 'millneum falcon',
	'status': 'wanted by jabba the hut',
	'friends': ['luke', 'leia', 'chewy'],
	'occupation': 'smuggler',
}
>>> type(hansolo)
<type 'dict'>
>>> hansolo['ship']
'millneum falcon'
>>> 
>>> hansolo['status']
'wanted by jabba the hut'
>>> len(hansolo)
4
>>> for friend in hansolo['friends']:
	print "Don't worry Han, %s will save you" % friend.title()

	
Don't worry Han, Luke will save you
Don't worry Han, Leia will save you
Don't worry Han, Chewy will save you
>>> 
>>> 
>>> 
>>> import pickle
>>> s = pickle.dumps(hansolo)
>>> del hansolo
>>> type(s)
<type 'str'>
>>> 
>>> hansolo = pickle.loads(s)
>>> del s
>>> type(hansolo)
<type 'dict'>
>>> for friend in hansolo['friends']:
	print "Don't worry Han, %s will save you" % friend.title()

	
Don't worry Han, Luke will save you
Don't worry Han, Leia will save you
Don't worry Han, Chewy will save you
>>> hansolo['status']
'wanted by jabba the hut'
>>> hansolo['ship']
'millneum falcon'
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> # Pickle handles arbitrary Python objects but it is Python specific
>>> # JSON is universal but handles only dicts, lists, bool, int, float, None, unicode
>>> 
>>> s

Traceback (most recent call last):
  File "<pyshell#503>", line 1, in <module>
    s
NameError: name 's' is not defined
>>> hansolo
{'status': 'wanted by jabba the hut', 'ship': 'millneum falcon', 'friends': ['luke', 'leia', 'chewy'], 'occupation': 'smuggler'}
>>> import json
>>> s = json.dumps(hansolo)
>>> type(s)
<type 'str'>
>>> del hansolo
>>> hansolo = json.loads(hansolo)

Traceback (most recent call last):
  File "<pyshell#509>", line 1, in <module>
    hansolo = json.loads(hansolo)
NameError: name 'hansolo' is not defined
>>> hansolo = json.loads(s)
>>> hansolo
{u'status': u'wanted by jabba the hut', u'ship': u'millneum falcon', u'friends': [u'luke', u'leia', u'chewy'], u'occupation': u'smuggler'}
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 37, in <module>
    checker = make_checker(correct_words)
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 11, in make_checker
    return br
NameError: global name 'br' is not defined
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 39, in <module>
    checker = make_checker(correct_words)
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 7, in make_checker
    return pickle.load(f)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 1384, in load
    return Unpickler(file).load()
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 863, in load
    key = read(1)
IOError: File not open for reading
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 39, in <module>
    checker = make_checker(correct_words)
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 7, in make_checker
    return pickle.load(f)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 1384, in load
    return Unpickler(file).load()
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 864, in load
    dispatch[key](self)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 886, in load_eof
    raise EOFError
EOFError
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 39, in <module>
    checker = make_checker(correct_words)
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 7, in make_checker
    return pickle.load(f)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 1384, in load
    return Unpickler(file).load()
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 864, in load
    dispatch[key](self)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 886, in load_eof
    raise EOFError
EOFError
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 39, in <module>
    checker = make_checker(correct_words)
  File "/Users/raymond/Dropbox/Public/sj141/spell_check.py", line 6, in make_checker
    with open('words.pcl', 'r') as f:
IOError: [Errno 2] No such file or directory: 'words.pcl'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj141/spell_check.py ========
Misspelled words:
-----------------
iss
tymme
guhd
tooo
comee
ayd
thur
>>> IOError: [Errno 2] No such file or directory: 'words.pcl'
SyntaxError: invalid syntax
>>> 
>>> 

>>> 
